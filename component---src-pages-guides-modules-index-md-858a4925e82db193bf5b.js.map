{"version":3,"file":"component---src-pages-guides-modules-index-md-858a4925e82db193bf5b.js","mappings":"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","sources":["webpack://cc-everywhere/./src/pages/guides/modules/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/cc-everywhere/cc-everywhere/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"modules\"\n    }}>{`Modules`}</h1>\n    <InlineAlert variant=\"error\" slots=\"header, text\" mdxType=\"InlineAlert\" />\n    <p>{`IMPORTANT: Deprecation Warning`}</p>\n    <p>{`Please be aware that this release is a public beta, and we anticipate further modifications to certain API signatures. Additional breaking changes may occur in the future.`}</p>\n    <p>{`This guide will demonstrate how to use modules (mini editors) in your own application.`}</p>\n    <h2 {...{\n      \"id\": \"createimagefromtext\"\n    }}>{`createImageFromText()`}</h2>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"../../../reference/index.md#cceverywhere\"\n      }}>{`CCEverywhere`}</a>{` object exposes the `}<inlineCode parentName=\"p\">{`miniEditor`}</inlineCode>{` interface. It contains APIs which loads contextual editing experiences in an iframe. The `}<inlineCode parentName=\"p\">{`createImageFromText()`}</inlineCode>{` API is powered by Adobe Firefly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Initialize the SDK first\nconst { miniEditor } = await ccEverywhere.initialize(); \nminiEditor.createImageFromText(); \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"texttoimageparams\"\n    }}>{`TextToImageParams`}</h3>\n    <p>{`All the properties in this object are optional.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`callbacks`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../reference/types/index.md#callbacks\"\n            }}>{`Callbacks`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Callback methods`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`modalParams`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../reference/types/index.md#modalparams\"\n            }}>{`ModalParams`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Parameters to configure editor/modal UI`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`inputParams`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#texttoimageinputparams\"\n            }}>{`TextToImageInputParams`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Input parameters when creating an image from text.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`outputParams`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../reference/types/index.md#ccxoutputparams\"\n            }}>{`CCXOutputParams`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Desired output options when exporting assets from the editor.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"texttoimageinputparams\"\n    }}>{`TextToImageInputParams`}</h3>\n    <p><inlineCode parentName=\"p\">{`TextToImageInputParams`}</inlineCode>{` allows you to configure the editor to be launched for the user.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`promptText`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Optional string to launch the text to image module with a prompt`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"editimage\"\n    }}>{`editImage()`}</h2>\n    <p>{`This API launches an iframe that allows users to continue editing an image in a modal. Instead of the entire Express editing experience, this module only loads relevant image-editing capabilities.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const { miniEditor } = await ccEverywhere.initialize(); \nminiEditor.editImage({\n    inputParams: {\n        asset: {\n            data: base64Asset,\n            dataType: 'base64',\n            type: 'image' \n        },\n        exportOptions: exportOptions\n    },\n    callbacks: callbacks,\n    outputParams: getAllowedFileTypes()\n}); \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"imagemedesignparams\"\n    }}>{`ImageMEDesignParams`}</h3>\n    <p>{`All the properties in this object are optional.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`callbacks`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../reference/types/index.md#callbacks\"\n            }}>{`Callbacks`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Callback methods`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`modalParams`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../reference/types/index.md#modalparams\"\n            }}>{`ModalParams`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Parameters to configure editor/modal UI`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`inputParams`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#imagemeinputparams\"\n            }}>{`ImageMEInputParams`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Input parameters when creating a design.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`outputParams`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#imagemeoutputparams\"\n            }}>{`ImageMEOutputParams`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Desired output options when exporting assets from the editor.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"imagemeinputparams\"\n    }}>{`ImageMEInputParams`}</h3>\n    <p><inlineCode parentName=\"p\">{`ImageMEInputParams`}</inlineCode>{` allows you to configure the editor to be launched for the user.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`asset`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../reference/types/index.md#asset\"\n            }}>{`Asset`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Asset object that contains the base64-encoded image data you want the editor to open.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`exportOptions`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../reference/types/index.md#exportoptions\"\n            }}>{`ExportOptions`}</a>{`[]`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Export options for the asset that is created. If no export options are specified, the editor falls back to the default layout options.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"imagemeoutputparams\"\n    }}>{`ImageMEOutputParams`}</h3>\n    <p>{`Allows you to define data type and file type of output asset.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`allowedFileTypes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../reference/types/index.md#filetype\"\n            }}>{`FileType`}</a>{`[]`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Output asset file types`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`outputType`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../reference/types/index.md#assetdatatype\"\n            }}>{`AssetDataType`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Output data type`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"example-create-image-from-text\"\n    }}>{`Example: Create image from text`}</h2>\n    <p>{`The following code will invoke the text-to-image module. In this example, we pass a string to be used as a prompt. If that field is left empty, the user will be prompted to input a prompt once the modal is open.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\",\n        \"metastring\": \"title=\\\"text-to-image.js\\\"\",\n        \"title\": \"\\\"text-to-image.js\\\"\"\n      }}>{`// Initialize the SDK first\nconst { miniEditor } = await ccEverywhere.initialize(); \n\nminiEditor.createImageFromText(\n    {\n        callbacks: callbacks,\n        inputParams: {\n            promptText: \"Aliens sitting in lawn chairs\" // Optional to pass prompt\n        },\n        outputParams: getAllowedFileTypes()\n    }\n);\n\nconst getAllowedFileTypes = () => {\n    const allowedFileTypes = ['image/png', 'image/jpeg'];\n    return {allowedFileTypes};\n}\n\nconst callbacks = {\n    onCancel: () => {},\n    onPublish: (publishParams) => {\n        console.log(publishParams)\n        const localData = { project: publishParams.asset[0].projectId, image: publishParams.asset[0].data };\n        image_data.src = localData.image;\n        project_id = localData.project;\n    },\n    onError: (err) => {\n        console.error('Error received is', err.toString());\n    },\n};\n`}</code></pre>\n    <p>{`When the user finishes in the editor and saves/publishes their design, the `}<inlineCode parentName=\"p\">{`onPublish`}</inlineCode>{` callback is invoked. Resulting project data is sent in `}<inlineCode parentName=\"p\">{`publishParams`}</inlineCode>{`. In this example, we save the project info (`}<inlineCode parentName=\"p\">{`project_id`}</inlineCode>{`) and display the image data (of the first page of the user's design) in some image container `}<inlineCode parentName=\"p\">{`image_data`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"example-image-editing\"\n    }}>{`Example: Image editing`}</h2>\n    <p>{`The following code will invoke the image editing module.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\",\n        \"metastring\": \"title=\\\"image-editing.js\\\"\",\n        \"title\": \"\\\"image-editing.js\\\"\"\n      }}>{`// Initialize the SDK first\nconst { miniEditor } = await ccEverywhere.initialize(); \n\nminiEditor.editImage(\n    {\n        callbacks: callbacks,\n        inputParams: {\n            asset: \"<base-64 encoded image data>\"\n        },\n        outputParams: getAllowedFileTypes()\n    }\n);\n\nconst getAllowedFileTypes = () => {\n    const allowedFileTypes = ['image/png', 'image/jpeg'];\n    return {allowedFileTypes};\n}\n\nconst callbacks = {\n    onCancel: () => {},\n    onPublish: (publishParams) => {\n        console.log(publishParams)\n        const localData = { project: publishParams.asset[0].projectId, image: publishParams.asset[0].data };\n        image_data.src = localData.image;\n        project_id = localData.project;\n    },\n    onError: (err) => {\n        console.error('Error received is', err.toString());\n    },\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","variant","slots","parentName","isMDXComponent"],"sourceRoot":""}