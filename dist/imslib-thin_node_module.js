/*!
 * /*************************************************************************
 * *   ADOBE CONFIDENTIAL
 * *
 * *   Copyright 2021 Adobe
 * *   All Rights Reserved.
 * *
 * *   NOTICE:  All information contained herein is, and remains
 * *   the property of Adobe and its suppliers, if any. The intellectual
 * *   and technical concepts contained herein are proprietary to Adobe
 * *   and its suppliers and are protected by all applicable intellectual
 * *   property laws, including trade secret and copyright laws.
 * *   Dissemination of this information or reproduction of this material
 * *   is strictly forbidden unless prior written permission is obtained
 * *   from Adobe.
 * ************************************************************************** /
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_name_"] = self["webpackChunk_name_"] || []).push([["imslib-thin_node_module"],{

/***/ "./node_modules/@identity/imslib-thin/adobe-id/AdobeIdThinData.js":
/*!************************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/adobe-id/AdobeIdThinData.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar ImsConstants_1 = __webpack_require__(/*! ../constants/ImsConstants */ \"./node_modules/@identity/imslib-thin/constants/ImsConstants.js\");\nvar IEnvironment_1 = __webpack_require__(/*! ./IEnvironment */ \"./node_modules/@identity/imslib-thin/adobe-id/IEnvironment.js\");\nvar Environment_1 = __importDefault(__webpack_require__(/*! ../adobe-ims/environment/Environment */ \"./node_modules/@identity/imslib-thin/adobe-ims/environment/Environment.js\"));\nvar AnalyticsParameters_1 = __webpack_require__(/*! ./AnalyticsParameters */ \"./node_modules/@identity/imslib-thin/adobe-id/AnalyticsParameters.js\");\nvar Log_1 = __importDefault(__webpack_require__(/*! ../log/Log */ \"./node_modules/@identity/imslib-thin/log/Log.js\"));\nvar IReauth_1 = __webpack_require__(/*! ../adobe-ims/facade/IReauth */ \"./node_modules/@identity/imslib-thin/adobe-ims/facade/IReauth.js\");\nvar IGrantTypes_1 = __webpack_require__(/*! ../adobe-ims/facade/IGrantTypes */ \"./node_modules/@identity/imslib-thin/adobe-ims/facade/IGrantTypes.js\");\nvar code_challenge_1 = __webpack_require__(/*! ../adobe-ims/pkce/code-challenge */ \"./node_modules/@identity/imslib-thin/adobe-ims/pkce/code-challenge.js\");\n/**\n *  Class used to store the adobe data values.\n *\n *  Ims library will use these values for all operations\n */\nvar AdobeIdThinData = /** @class */ (function () {\n    /**\n     * @constructor Create the adobeIdData object with all necessary properties from adobeData input paramater\n     *\n     * It uses the input adobeData parameter or the object stored in window.adobeid\n     */\n    function AdobeIdThinData(adobeData) {\n        if (adobeData === void 0) { adobeData = null; }\n        /**\n         * represents the class used to store the analytics parameters\n         */\n        this.analyticsParameters = new AnalyticsParameters_1.AnalyticsParameters();\n        /**\n          @property Object containing various custom parameters for IMS.\n          This object is used in case a custom API parameter is desired to be sent to the back-end.\n      \n          E.G. { logout: 'your_custom_value' }\n      \n          The list of api's which can be customized are: authorize, validate_token, profile, userinfo, logout, logout_token, check, providers, ijt\n        */\n        this.api_parameters = {};\n        /**\n          @property {string} Localization value used by ims library.\n          \n          Default value is `en_US`\n        */\n        this.locale = \"\";\n        /**\n         * @property {string} - The scopes used to acquire access tokens. A comma separated list of client scopes.\n         * No whitespace.\n         * Default scopes: AdobeID\n         */\n        this.scope = \"AdobeID\";\n        /**\n         * @property {string} - The client id used by ims library\n         */\n        this.client_id = \"\";\n        /**\n         * represents the used environment; default is prod and in case the value is stg1, the stage environment is used\n         */\n        this.environment = IEnvironment_1.IEnvironment.PROD;\n        /**\n         *  use the local storage for token management; default value is false;\n         */\n        this.useLocalStorage = false;\n        /** @function {adobeid.onReady} [onReady] - Function to be executed once imslib.js has been fully\n         * initialized.\n         */\n        this.onReady = null;\n        var adobeid = adobeData ? adobeData : window[ImsConstants_1.AdobeIdKey];\n        if (!adobeid) {\n            throw new Error(\"Please provide adobeId information\");\n        }\n        var api_parameters = adobeid.api_parameters, client_id = adobeid.client_id, locale = adobeid.locale, scope = adobeid.scope, ijt = adobeid.ijt, _a = adobeid.environment, environment = _a === void 0 ? IEnvironment_1.IEnvironment.PROD : _a, redirect_uri = adobeid.redirect_uri, useLocalStorage = adobeid.useLocalStorage, logsEnabled = adobeid.logsEnabled, onReady = adobeid.onReady;\n        this.environment = environment;\n        this.api_parameters = api_parameters ? api_parameters : {};\n        this.client_id = client_id;\n        this.locale = locale || ImsConstants_1.DEFAULT_LANGUAGE;\n        this.scope = scope ? scope.replace(/\\s/gi, '') : '';\n        this.redirect_uri = redirect_uri;\n        this.ijt = ijt;\n        this.useLocalStorage = useLocalStorage;\n        if (logsEnabled) {\n            Log_1.default.enableLogging();\n        }\n        else {\n            Log_1.default.disableLogging();\n        }\n        this.onReady = onReady ? onReady : null;\n        this.fillAnalityticsParameters(adobeid);\n        Environment_1.default.loadEnvironment(environment);\n    }\n    /**\n     * fill the analytic parameters with the values provided by adobeid data\n     * @param adobeid represents the adobeid data provided to library\n     */\n    AdobeIdThinData.prototype.fillAnalityticsParameters = function (adobeid) {\n        var _a = adobeid.analytics, _b = _a === void 0 ? {} : _a, _c = _b.appCode, appCode = _c === void 0 ? \"\" : _c, _d = _b.appVersion, appVersion = _d === void 0 ? \"\" : _d;\n        var analyticsParameters = this.analyticsParameters;\n        analyticsParameters.appCode = appCode;\n        analyticsParameters.appVersion = appVersion;\n    };\n    /**\n     * Function used by IMSLib to use only the neccesarry properties from AdobeIdData for social provider\n     * @param providerName provider name used for sign in\n     * @param requestedParameters {Object} the external parameters used for signin and reauth methods\n     * @param contextToBePassedOnRedirect {any | undefined} represents the context which is passed during redirect\n     */\n    AdobeIdThinData.prototype.createSocialProviderRedirectRequest = function (providerName, requestedParameters, contextToBePassedOnRedirect, nonce, grantType) {\n        var params = {\n            idp_flow: \"social.deep_link.web\",\n            provider_id: providerName,\n        };\n        var signInParams = __assign(__assign({}, requestedParameters), params);\n        return this.createRedirectRequest(signInParams, contextToBePassedOnRedirect, nonce, grantType);\n    };\n    /**\n     * Function used by ims to use only the neccesarry properties from AdobeIdData on sign in and reauth methods\n     * @param requestedParameters {Object} the external parameters used for signin and reauth methods\n     * @param contextToBePassedOnRedirect {any | undefined} represents the context which is passed during redirect\n     * @param nonce {string} - string representing the nonce value used for CSRF\n     * @param reauth {string}; represents the re authenticate value. available values are: check and force. default value is \"check\"\n     */\n    AdobeIdThinData.prototype.createReAuthenticateRedirectRequest = function (requestedParameters, contextToBePassedOnRedirect, nonce, reauth, grantType) {\n        if (reauth === void 0) { reauth = IReauth_1.IReauth.check; }\n        if (grantType === void 0) { grantType = IGrantTypes_1.IGrantTypes.token; }\n        var params = {\n            reauth: reauth,\n        };\n        var reauthParams = __assign(__assign({}, requestedParameters), params);\n        return this.createRedirectRequest(reauthParams, contextToBePassedOnRedirect, nonce, grantType);\n    };\n    /**\n     * Function used by ims to use only the neccesarry properties from AdobeIdData on sign in and reauth methods\n     * @param requestedParameters {Object} the external parameters used for signin and reauth methods\n     * @param contextToBePassedOnRedirect {any | undefined} represents the context which is passed during redirect\n     */\n    AdobeIdThinData.prototype.createSignUpRedirectRequest = function (requestedParameters, contextToBePassedOnRedirect, nonce) {\n        var signupParams = __assign(__assign({}, requestedParameters), { idp_flow: \"create_account\" });\n        return this.createRedirectRequest(signupParams, contextToBePassedOnRedirect, nonce, IGrantTypes_1.IGrantTypes.token);\n    };\n    /**\n     * Function used by ims to use only the neccesarry properties from AdobeIdData on sign in and reauth methods\n     * @param externalParameters {Object} the external parameters used for signin and reauth methods\n     * @param contextToBePassedOnRedirect {any | undefined} represents the context which is passed during redirect\n     * @param nonce {string} - string representing the nonce value used for CSRF\n     * @param grantType {IGrantTypes} represents the grant type used for sign in flow\n     */\n    AdobeIdThinData.prototype.createRedirectRequest = function (externalParameters, contextToBePassedOnRedirect, nonce, grantType) {\n        var _this = this;\n        var _a = this, _b = _a.api_parameters, apiParameters = _b === void 0 ? {} : _b, clientId = _a.client_id, _c = _a.redirect_uri, adobeIdRedirectUri = _c === void 0 ? '' : _c, scope = _a.scope, locale = _a.locale;\n        var state = this.createRedirectState(contextToBePassedOnRedirect, nonce);\n        var redirectRequest = {\n            adobeIdRedirectUri: adobeIdRedirectUri,\n            apiParameters: apiParameters,\n            clientId: clientId,\n            externalParameters: externalParameters,\n            scope: scope,\n            locale: locale,\n            response_type: grantType,\n            state: state,\n        };\n        if (grantType === IGrantTypes_1.IGrantTypes.token) {\n            return Promise.resolve(redirectRequest);\n        }\n        var codeChallenge = new code_challenge_1.CodeChallenge();\n        return codeChallenge.createCodeChallenge(nonce).then(function (challengeResponse) {\n            externalParameters.code_challenge = challengeResponse.challenge;\n            externalParameters.code_challenge_method = 'S256';\n            var codeState = _this.createRedirectState(contextToBePassedOnRedirect, nonce);\n            redirectRequest.state = codeState;\n            return Promise.resolve(redirectRequest);\n        });\n    };\n    /**\n     * create the stae object used during redirect; if the adobeid.context is empty and no analytics parameters, the state will ne null\n     * @param context represents the external parameters\n     */\n    AdobeIdThinData.prototype.createRedirectState = function (context, nonce) {\n        var _a = this.analyticsParameters, _b = _a.appCode, appCode = _b === void 0 ? \"\" : _b, _c = _a.appVersion, appVersion = _c === void 0 ? \"\" : _c;\n        var state = context === undefined\n            ? {}\n            : {\n                context: context,\n            };\n        if (appCode) {\n            state[\"ac\"] = appCode;\n        }\n        if (appVersion) {\n            state[\"av\"] = appVersion;\n        }\n        state[\"jslibver\"] = Environment_1.default.jslibver;\n        state[\"nonce\"] = nonce;\n        return Object.keys(state).length ? state : null;\n    };\n    AdobeIdThinData.prototype.triggerOnReady = function () {\n        this.onReady && this.onReady(undefined);\n    };\n    return AdobeIdThinData;\n}());\nexports.AdobeIdThinData = AdobeIdThinData;\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/adobe-id/AdobeIdThinData.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/adobe-id/AnalyticsParameters.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/adobe-id/AnalyticsParameters.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * class used to store the analytics parameters\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar AnalyticsParameters = /** @class */ (function () {\n    function AnalyticsParameters() {\n        /**\n        * represents the application code value;\n        * this value (if exists) will be sent to the server.\n        */\n        this.appCode = '';\n        /**\n         * represents the application version value;\n         * this value (if exists) will be sent to the server.\n         */\n        this.appVersion = '';\n    }\n    return AnalyticsParameters;\n}());\nexports.AnalyticsParameters = AnalyticsParameters;\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/adobe-id/AnalyticsParameters.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/adobe-ims/AdobeIMSThin.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/adobe-ims/AdobeIMSThin.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar SignInService_1 = __webpack_require__(/*! ./sign-in/SignInService */ \"./node_modules/@identity/imslib-thin/adobe-ims/sign-in/SignInService.js\");\nvar SignOutService_1 = __webpack_require__(/*! ./sign-out/SignOutService */ \"./node_modules/@identity/imslib-thin/adobe-ims/sign-out/SignOutService.js\");\nvar AdobeIdThinData_1 = __webpack_require__(/*! ../adobe-id/AdobeIdThinData */ \"./node_modules/@identity/imslib-thin/adobe-id/AdobeIdThinData.js\");\nvar FragmentHelper_1 = __importDefault(__webpack_require__(/*! ../url/FragmentHelper */ \"./node_modules/@identity/imslib-thin/url/FragmentHelper.js\"));\nvar IReauth_1 = __webpack_require__(/*! ./facade/IReauth */ \"./node_modules/@identity/imslib-thin/adobe-ims/facade/IReauth.js\");\nvar IGrantTypes_1 = __webpack_require__(/*! ./facade/IGrantTypes */ \"./node_modules/@identity/imslib-thin/adobe-ims/facade/IGrantTypes.js\");\n/**\n * Class used as a facade for ims library in order to provide public access only to a part of the main library functionalities\n *\n */\nvar AdobeIMSThin = /** @class */ (function () {\n    /**\n     *\n     * @param adobeData {IAdobeData} if not null, the adobeIdData instance will be created based on this values\n     */\n    function AdobeIMSThin(adobeIdThinData) {\n        var _this = this;\n        if (adobeIdThinData === void 0) { adobeIdThinData = null; }\n        /**\n         * AdobeIdData\n         * the values for adobeId are read from window.adobeid or passed by using the constructor\n         */\n        this.adobeIdThinData = null;\n        /**\n       * Method used to redirect the user to signin url\n       *\n       * <uml>\n       * start\n       * :SignIn;\n       * :Create the redirect url;\n       * :user must enter the credentials and after that is redirected to initial uri;\n       * :developer should use the fragmentValues method and implement the token mangement;\n       * end\n       * </uml>\n       * @param externalParameters {Object} object sent from outside in order to have the possibility to override the default values when the redirect uri is created\n       * @param nonce {string} string value used for csrf\n       * @param contextToBePassedOnRedirect {any | undefined} represents the context which is passed during redirect\n       * @param grantType {IGrantTypes} represents the grant type used for sign in flow\n       *\n      */\n        this.signIn = function (externalParameters, nonce, contextToBePassedOnRedirect, grantType) {\n            if (externalParameters === void 0) { externalParameters = {}; }\n            if (nonce === void 0) { nonce = ''; }\n            if (contextToBePassedOnRedirect === void 0) { contextToBePassedOnRedirect = {}; }\n            if (grantType === void 0) { grantType = IGrantTypes_1.IGrantTypes.token; }\n            var adobeIdThinData = _this.adobeIdThinData;\n            if (!adobeIdThinData) {\n                throw new Error('no adobeId on sign in');\n            }\n            return adobeIdThinData.createRedirectRequest(externalParameters, contextToBePassedOnRedirect, nonce, grantType)\n                .then(function (authorizeRequestData) {\n                new SignInService_1.SignInService().signIn(authorizeRequestData);\n                return Promise.resolve();\n            });\n        };\n        /**\n         * Method used to return the authorization url;\n         *\n         * @param externalParameters {Object} object sent from outside in order to have the possibility to override the default values when the redirect uri is created\n         * @param nonce {string} string value used for csrf\n         * @param contextToBePassedOnRedirect {any | undefined} represents the context which is passed during redirect\n         *\n        */\n        this.getAuthorizationUrl = function (externalParameters, nonce, contextToBePassedOnRedirect, grantType) {\n            if (externalParameters === void 0) { externalParameters = {}; }\n            if (nonce === void 0) { nonce = ''; }\n            if (grantType === void 0) { grantType = IGrantTypes_1.IGrantTypes.token; }\n            var adobeIdThinData = _this.adobeIdThinData;\n            if (!adobeIdThinData) {\n                throw new Error('no adobeId on sign in');\n            }\n            return adobeIdThinData.createRedirectRequest(externalParameters, contextToBePassedOnRedirect, nonce, grantType)\n                .then(function (authorizeRequestData) {\n                var authUrl = new SignInService_1.SignInService().createRedirectUrl(authorizeRequestData);\n                return Promise.resolve(authUrl);\n            });\n        };\n        /**\n          * Method used to return the authorization url;\n          *\n          * @param externalParameters {Object} object sent from outside in order to have the possibility to override the default values when the redirect uri is created\n          * @param contextToBePassedOnRedirect {any | undefined} represents the context which is passed during redirect\n          *\n         */\n        this.getSocialProviderAuthorizationUrl = function (providerName, externalParameters, contextToBePassedOnRedirect, grantType) {\n            if (externalParameters === void 0) { externalParameters = {}; }\n            if (grantType === void 0) { grantType = IGrantTypes_1.IGrantTypes.token; }\n            var adobeIdThinData = _this.adobeIdThinData;\n            if (!adobeIdThinData) {\n                throw new Error('no adobeId on sign in');\n            }\n            return adobeIdThinData.createSocialProviderRedirectRequest(providerName, externalParameters, contextToBePassedOnRedirect, '', grantType)\n                .then(function (authorizeRequestData) {\n                var url = new SignInService_1.SignInService().createRedirectUrl(authorizeRequestData);\n                return Promise.resolve(url);\n            });\n        };\n        /**\n          * Method used to return the authorization url;\n          *\n          * @param reauth {string}; represents the re authenticate value. available values are: check and force. default value is \"check\"\n          * @param requestedParameters {Object} object sent from outside in order to have the possibility to override the default values when the redirect uri is created\n          * @param contextToBePassedOnRedirect {any | undefined} represents the context which is passed during redirect\n         */\n        this.getReauthenticateAuthorizationUrl = function (reauth, requestedParameters, contextToBePassedOnRedirect, grantType) {\n            if (reauth === void 0) { reauth = IReauth_1.IReauth.check; }\n            if (requestedParameters === void 0) { requestedParameters = {}; }\n            if (grantType === void 0) { grantType = IGrantTypes_1.IGrantTypes.token; }\n            var adobeIdThinData = _this.adobeIdThinData;\n            if (!adobeIdThinData) {\n                throw new Error('no adobeId on sign in');\n            }\n            return adobeIdThinData.createReAuthenticateRedirectRequest(requestedParameters, contextToBePassedOnRedirect, '', reauth, grantType)\n                .then(function (authorizeRequestData) {\n                var url = new SignInService_1.SignInService().createRedirectUrl(authorizeRequestData);\n                return Promise.resolve(url);\n            });\n        };\n        /**\n          * Method used to return the authorization url;\n          *\n          * @param externalParameters {Object} object sent from outside in order to have the possibility to override the default values when the redirect uri is created\n          * @param contextToBePassedOnRedirect {any | undefined} represents the context which is passed during redirect\n          *\n         */\n        this.getSignUpAuthorizationUrl = function (requestedParameters, contextToBePassedOnRedirect) {\n            if (requestedParameters === void 0) { requestedParameters = {}; }\n            var adobeIdThinData = _this.adobeIdThinData;\n            if (!adobeIdThinData) {\n                throw new Error('no adobeId on sign in');\n            }\n            return adobeIdThinData.createSignUpRedirectRequest(requestedParameters, contextToBePassedOnRedirect, '')\n                .then(function (authorizeRequestData) {\n                var signInService = new SignInService_1.SignInService();\n                return signInService.createRedirectUrl(authorizeRequestData);\n            });\n        };\n        /**\n         * token {string} represents the token used for sign out\n         * externalParameters {object} - external parameters passed to sign out\n         *\n         * <uml>\n         * start\n         * :Signout;\n         * :Create the redirect url;\n         * :remove the token and profile from storage;\n         * :developer should implement his scenario after signout\n         * end\n         * </uml>\n         */\n        this.signOut = function (externalParameters) {\n            if (externalParameters === void 0) { externalParameters = {}; }\n            var adobeIdData = _this.adobeIdThinData;\n            if (!adobeIdData) {\n                throw new Error('no adobeId on sign out');\n            }\n            var _a = adobeIdData.api_parameters, apiParameters = _a === void 0 ? {} : _a, clientId = adobeIdData.client_id, adobeIdRedirectUri = adobeIdData.redirect_uri;\n            var redirectRequest = {\n                adobeIdRedirectUri: adobeIdRedirectUri,\n                apiParameters: apiParameters,\n                clientId: clientId,\n                externalParameters: externalParameters,\n            };\n            var signOutService = new SignOutService_1.SignOutService();\n            signOutService.signOut(redirectRequest);\n        };\n        this.adobeIdThinData = new AdobeIdThinData_1.AdobeIdThinData(adobeIdThinData);\n    }\n    /**\n     * method used to notify that the library has been initialized\n     */\n    AdobeIMSThin.prototype.initialize = function () {\n        var adobeIdThinData = this.adobeIdThinData;\n        if (!adobeIdThinData) {\n            throw new Error('Please provide the adobe Id data');\n        }\n        adobeIdThinData.triggerOnReady();\n    };\n    /**\n     * Helper function used to transform fragment values into a json object\n     */\n    AdobeIMSThin.prototype.fragmentValues = function () {\n        return FragmentHelper_1.default.fragmentToObject();\n    };\n    /**\n     * Helper function used to return the nonce value from fragment\n     */\n    AdobeIMSThin.prototype.getNonce = function () {\n        var fragment = this.fragmentValues();\n        if (!fragment) {\n            return null;\n        }\n        var _a = fragment.redirectParams, redirectParams = _a === void 0 ? {} : _a;\n        return redirectParams ? redirectParams[\"nonce\"] || null : null;\n    };\n    return AdobeIMSThin;\n}());\nexports.AdobeIMSThin = AdobeIMSThin;\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/adobe-ims/AdobeIMSThin.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/adobe-ims/environment/Environment.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/adobe-ims/environment/Environment.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar IEnvironment_1 = __webpack_require__(/*! ../../adobe-id/IEnvironment */ \"./node_modules/@identity/imslib-thin/adobe-id/IEnvironment.js\");\n/**\n * class used to store the variables used for ims flow\n */\nvar Environment = /** @class */ (function () {\n    function Environment() {\n        /**\n       * @property {String} Represents the base url used on api (back-end) call in case of getProfile, getUserInfo and validateToken;\n       */\n        this.baseUrlAdobe = '';\n        /**\n       * @property {string} Represents the base url used on api (back-end) call in case of logoutToken, checkStatus checkToken,listSocialProviders and exchangeIjt;\n       */\n        this.baseUrlServices = '';\n        /**\n       * @property {string} this parameter is passed to redirect uri during a sign in or sign out operation\n       */\n        this.jslibver = 'v2-v0.20.0-2-g623f68b';\n    }\n    Environment.prototype.loadEnvironment = function (environment) {\n        if (environment === IEnvironment_1.IEnvironment.STAGE) {\n            this.baseUrlAdobe = 'https://ims-na1-stg1.adobelogin.com';\n            this.baseUrlServices = 'https://adobeid-na1-stg1.services.adobe.com';\n            return;\n        }\n        this.baseUrlAdobe = 'https://ims-na1.adobelogin.com';\n        this.baseUrlServices = 'https://adobeid-na1.services.adobe.com';\n    };\n    return Environment;\n}());\nexports[\"default\"] = new Environment();\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/adobe-ims/environment/Environment.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/adobe-ims/facade/IReauth.js":
/*!************************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/adobe-ims/facade/IReauth.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Enumeration values used for reAuthenticate method\n *\n * Default value is check\n */\nvar IReauth;\n(function (IReauth) {\n    /**\n     * Forces the reauth process to show the credentials screen to the user\n     */\n    IReauth[\"force\"] = \"force\";\n    /**\n     * Starts the reauthentication check flow. Which won't prompt the user for reauthentication if the user already performed an authentication in a period of time configured on the client id.\n     */\n    IReauth[\"check\"] = \"check\";\n})(IReauth = exports.IReauth || (exports.IReauth = {}));\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/adobe-ims/facade/IReauth.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/adobe-ims/helpers/RedirectHelper.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/adobe-ims/helpers/RedirectHelper.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar ApiHelpers_1 = __importDefault(__webpack_require__(/*! ../../api-helpers/ApiHelpers */ \"./node_modules/@identity/imslib-thin/api-helpers/ApiHelpers.js\"));\nvar ObjectUtil_1 = __webpack_require__(/*! ../../util/ObjectUtil */ \"./node_modules/@identity/imslib-thin/util/ObjectUtil.js\");\nvar RedirectHelper = /** @class */ (function () {\n    function RedirectHelper() {\n    }\n    /**\n    * returns the initial redirect url; the priority value is redirect_uri from external parameters, adobeId and finally the href value from browsers\n    * @param externalParameters\n    * @param adobeIdRedirectUri\n    */\n    RedirectHelper.getInitialRedirectUri = function (externalParameters, adobeIdRedirectUri) {\n        var redirectValue = externalParameters[\"redirect_uri\"] || (adobeIdRedirectUri || window.location.href);\n        var fromImsIndex = redirectValue.indexOf('from_ims');\n        if (fromImsIndex === -1) {\n            return redirectValue;\n        }\n        if (redirectValue[fromImsIndex - 1] === '#') {\n            fromImsIndex--;\n        }\n        return redirectValue.substr(0, fromImsIndex);\n    };\n    /**\n    * create the return url which it will be passed to authorize or logout endpoint\n    * @param adobeIdRedirectUri {string} - represents the redirect_uri? set on AdobeId;\n    * @param clientId {string} - represents the client id from AdobeId\n    * @param externalParameters {Object} external parameters passed to library\n    * @param apiName {string} api name\n    *\n    * @returns {string} final redirect url used for sign-in or reauth (authorize) or logout\n    */\n    RedirectHelper.createDefaultRedirectUrl = function (adobeIdRedirectUri, clientId, externalParameters, apiName) {\n        var initialRedirectUri = this.getInitialRedirectUri(externalParameters, adobeIdRedirectUri);\n        //encode the hash in case that exists\n        var redirectUri = this.createOldHash(initialRedirectUri);\n        return redirectUri.indexOf('?') > 0 ?\n            redirectUri + \"&client_id=\" + clientId + \"&api=\" + apiName :\n            redirectUri + \"?client_id=\" + clientId + \"&api=\" + apiName;\n    };\n    /**\n     * <uml>\n     * start\n     * :CreateDefaultRedirectUrl ;\n     * :merge api parameters with external parameters\n     * :encode the merged parameters and call the /ims/authorize/v1/${encodedParameters} url\n     * end\n     * </uml>\n     *\n     * create the return url which it will be passed to authorization endpoint\n     * @param redirectUri {string} - represents the base url href value\n     * @param clientId {string} - represents the client id\n     * @param externalParameters {Object} external parameters passed to library\n     * @param apiName {string} api name\n     * @parm scope {string} scope of sign in\n     * @returns {string} final redirect url used for sign in\n     */\n    RedirectHelper.createRedirectUrl = function (adobeIdRedirectUri, clientId, externalParameters, apiName, scope) {\n        if (scope === void 0) { scope = ''; }\n        var redirectUri = this.createDefaultRedirectUrl(adobeIdRedirectUri, clientId, externalParameters, apiName);\n        scope = scope || externalParameters[\"scope\"] || '';\n        if (scope) {\n            redirectUri = redirectUri + \"&scope=\" + scope;\n        }\n        var reauth = externalParameters[\"reauth\"] || '';\n        if (reauth) {\n            redirectUri = redirectUri + \"&reauth=\" + reauth;\n        }\n        return redirectUri;\n    };\n    /**\n     * @param source {string} represent the url value\n     * @returns {string} the url with hash\n     */\n    RedirectHelper.createOldHash = function (source) {\n        var index = source.indexOf(\"#\");\n        if (index < 0) {\n            return source + \"#old_hash=&from_ims=true\";\n        }\n        var baseUrl = source.substring(0, index);\n        var hash = source.substring(index + 1);\n        return baseUrl + \"#old_hash=\" + hash + \"&from_ims=true\";\n    };\n    RedirectHelper.mergeApiParamsWithExternalParams = function (apiParameters, externalParameters, apiName) {\n        return ObjectUtil_1.merge(ApiHelpers_1.default.getCustomApiParameters(apiParameters, apiName), externalParameters);\n    };\n    return RedirectHelper;\n}());\nexports.RedirectHelper = RedirectHelper;\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/adobe-ims/helpers/RedirectHelper.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/adobe-ims/pkce/code-challenge.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/adobe-ims/pkce/code-challenge.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar StorageFactory_1 = __importDefault(__webpack_require__(/*! ../../storage/StorageFactory */ \"./node_modules/@identity/imslib-thin/storage/StorageFactory.js\"));\nexports.ONE_HOUR = 60 * 60 * 3600;\nvar CodeChallenge = /** @class */ (function () {\n    function CodeChallenge() {\n        this.storage = StorageFactory_1.default.getAvailableStorage();\n    }\n    CodeChallenge.prototype.b64Uri = function (r) {\n        return btoa(r).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n    };\n    /**\n     *\n     * @param nonce {String} represents the key used to store the code verifier\n     * @param verifierLength {number} represents the verifier length\n     * @returns {ICodeChallenge} verifier and challenge codes\n     */\n    CodeChallenge.prototype.createCodeChallenge = function (nonce, verifierLength) {\n        var _this = this;\n        if (verifierLength === void 0) { verifierLength = 43; }\n        var cryptoObj = window['msCrypto'] || window.crypto;\n        var verifier = this.b64Uri(Array.prototype.map.call(cryptoObj.getRandomValues(new Uint8Array(verifierLength)), function (r) {\n            return String.fromCharCode(r);\n        }).join(\"\")).substring(0, verifierLength);\n        var uintVerifierArr = new Uint8Array(verifier.length);\n        for (var i = 0; i < verifier.length; i++)\n            uintVerifierArr[i] = verifier.charCodeAt(i);\n        var cryptoDigest = cryptoObj.subtle.digest('SHA-256', uintVerifierArr);\n        return new Promise(function (resolve, reject) {\n            if (window['CryptoOperation']) {\n                cryptoDigest.onerror = function (err) { return reject(err); };\n                cryptoDigest.oncomplete = function (response) {\n                    var uintArr = new Uint8Array(response.target.result);\n                    var challenge = _this.b64Uri(String.fromCharCode.apply(String, __spread(uintArr)));\n                    return resolve(_this.saveVerifierAndReturn(nonce, {\n                        verifier: verifier,\n                        challenge: challenge,\n                    }));\n                };\n            }\n            else {\n                cryptoDigest.then(function (response) {\n                    var uintArr = new Uint8Array(response);\n                    var challenge = _this.b64Uri(String.fromCharCode.apply(String, __spread(uintArr)));\n                    return resolve(_this.saveVerifierAndReturn(nonce, {\n                        verifier: verifier,\n                        challenge: challenge,\n                    }));\n                });\n            }\n        });\n    };\n    /**\n     *\n     * @param nonce {String} represents the key used to store the code verifier\n     * @param challengeAndVerifier {ICodeChallenge} represents the code challenge and code verifier\n     * @returns ICodeChallenge\n     */\n    CodeChallenge.prototype.saveVerifierAndReturn = function (nonce, challengeAndVerifier) {\n        var verifiers = this.getVerifierValuesFromStorage();\n        var storageValue = {\n            verifier: challengeAndVerifier.verifier || '',\n            expiry: new Date().getTime().toString()\n        };\n        verifiers[nonce] = storageValue;\n        this.storage.setItem('verifiers', JSON.stringify(verifiers));\n        return Promise.resolve(challengeAndVerifier);\n    };\n    /**\n   * Returns the nonce values from storage as an Object or null\n   * @returns {IDictionary | null}\n   */\n    CodeChallenge.prototype.getVerifierValuesFromStorage = function () {\n        var storageVerifiers = this.storage.getItem('verifiers');\n        var verifiers = storageVerifiers ? JSON.parse(storageVerifiers) : {};\n        return this.clearOlderVerifiers(verifiers);\n    };\n    CodeChallenge.prototype.clearOlderVerifiers = function (verifiers, olderThan) {\n        if (olderThan === void 0) { olderThan = exports.ONE_HOUR; }\n        var oneHourAgo = Date.now() - olderThan;\n        var expiry = 0;\n        Object.keys(verifiers).forEach(function (key) {\n            expiry = parseInt(verifiers[key]);\n            if (expiry < oneHourAgo) {\n                delete verifiers[key];\n            }\n        });\n        return verifiers;\n    };\n    /**\n     * rerturns the verifier from storage\n     * @param key {String} represents the key used to stora the verfier\n     */\n    CodeChallenge.prototype.getVerifierByKey = function (key) {\n        var verifiers = this.getVerifierValuesFromStorage();\n        var verifierObj = verifiers ? verifiers[key] : {};\n        delete verifiers[key];\n        this.storage.setItem('verifiers', JSON.stringify(verifiers));\n        return verifierObj ? verifierObj['verifier'] : '';\n    };\n    return CodeChallenge;\n}());\nexports.CodeChallenge = CodeChallenge;\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/adobe-ims/pkce/code-challenge.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/adobe-ims/sign-in/BaseSignInService.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/adobe-ims/sign-in/BaseSignInService.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar UrlHelper_1 = __importDefault(__webpack_require__(/*! ../../url/UrlHelper */ \"./node_modules/@identity/imslib-thin/url/UrlHelper.js\"));\nvar Environment_1 = __importDefault(__webpack_require__(/*! ../environment/Environment */ \"./node_modules/@identity/imslib-thin/adobe-ims/environment/Environment.js\"));\nvar RedirectHelper_1 = __webpack_require__(/*! ../helpers/RedirectHelper */ \"./node_modules/@identity/imslib-thin/adobe-ims/helpers/RedirectHelper.js\");\nvar ObjectUtil_1 = __webpack_require__(/*! ../../util/ObjectUtil */ \"./node_modules/@identity/imslib-thin/util/ObjectUtil.js\");\n/**\n * command responsable for user sign in\n */\nvar BaseSignInService = /** @class */ (function () {\n    function BaseSignInService() {\n        var _this = this;\n        /**\n         * execute the sign in method which redirects the user to the login page\n         * <uml>\n         * start\n         * :CreateRedirectUrl;\n         * :merge api parameters with external parameters\n         * :encode the merged parameters and call the /ims/authorize/v1/${encodedParameters} url\n         * end\n         * </uml>\n         *\n         * @param {IRedirectRequest} redirectRequest. contains all the adobeId necessary properties necessary for sign in\n         */\n        this.composeRedirectUrl = function (redirectRequest) {\n            var apiName = \"authorize\";\n            var apiParameters = redirectRequest.apiParameters, _a = redirectRequest.externalParameters, externalParameters = _a === void 0 ? {} : _a, _b = redirectRequest.adobeIdRedirectUri, adobeIdRedirectUri = _b === void 0 ? \"\" : _b, clientId = redirectRequest.clientId, localeAdobeId = redirectRequest.locale, _c = redirectRequest.state, state = _c === void 0 ? {} : _c;\n            var _d = redirectRequest.scope, scope = _d === void 0 ? externalParameters[\"scope\"] || apiParameters[\"scope\"] || \"\" : _d;\n            var apiExternalParams = RedirectHelper_1.RedirectHelper.mergeApiParamsWithExternalParams(apiParameters, externalParameters, apiName);\n            if (state) {\n                apiExternalParams.state = ObjectUtil_1.merge(apiExternalParams.state || {}, state);\n            }\n            var redirectUrl = RedirectHelper_1.RedirectHelper.createRedirectUrl(adobeIdRedirectUri, clientId, apiExternalParams, apiName, scope);\n            var locale = externalParameters.locale || localeAdobeId || '';\n            var \n            // eslint-disable-next-line @typescript-eslint/camelcase\n            _e = redirectRequest.response_type, \n            // eslint-disable-next-line @typescript-eslint/camelcase\n            response_type = _e === void 0 ? apiExternalParams[\"response_type\"] || '' : _e;\n            var parameters = __assign(__assign({}, apiExternalParams), { client_id: clientId, scope: scope,\n                locale: locale,\n                response_type: response_type, jslVersion: Environment_1.default.jslibver, redirect_uri: redirectUrl });\n            return parameters;\n        };\n        /**\n         * execute the sign in method which redirects the user to the login page\n         * <uml>\n         * start\n         * :CreateRedirectUrl;\n         * :merge api parameters with external parameters\n         * :encode the merged parameters and call the /ims/authorize/v1/${encodedParameters} url\n         * end\n         * </uml>\n         *\n         * @param {IRedirectRequest} redirectRequest. contains all the adobeId necessary properties necessary for sign in\n         */\n        this.createRedirectUrl = function (redirectRequest) {\n            var parameters = _this.composeRedirectUrl(redirectRequest);\n            var queryStrings = UrlHelper_1.default.uriEncodeData(parameters);\n            var url = Environment_1.default.baseUrlAdobe + \"/ims/authorize/v1?\" + queryStrings;\n            return url;\n        };\n    }\n    return BaseSignInService;\n}());\nexports.BaseSignInService = BaseSignInService;\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/adobe-ims/sign-in/BaseSignInService.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/adobe-ims/sign-in/SignInService.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/adobe-ims/sign-in/SignInService.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar UrlHelper_1 = __importDefault(__webpack_require__(/*! ../../url/UrlHelper */ \"./node_modules/@identity/imslib-thin/url/UrlHelper.js\"));\nvar Environment_1 = __importDefault(__webpack_require__(/*! ../environment/Environment */ \"./node_modules/@identity/imslib-thin/adobe-ims/environment/Environment.js\"));\nvar BaseSignInService_1 = __webpack_require__(/*! ./BaseSignInService */ \"./node_modules/@identity/imslib-thin/adobe-ims/sign-in/BaseSignInService.js\");\n/**\n * command responsable for user sign in\n */\nvar SignInService = /** @class */ (function (_super) {\n    __extends(SignInService, _super);\n    function SignInService() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * execute the sign in method which redirects the user to the login page\n         * <uml>\n         * start\n         * :CreateRedirectUrl;\n         * :merge api parameters with external parameters\n         * :encode the merged parameters and call the /ims/authorize/v1/${encodedParameters} url\n         * end\n         * </uml>\n         *\n         * @param {IRedirectRequest} redirectRequest. contains all the adobeId necessary properties necessary for sign in\n         */\n        _this.signIn = function (redirectRequest) {\n            var url = _this.createRedirectUrl(redirectRequest);\n            UrlHelper_1.default.setHrefUrl(url);\n        };\n        /**\n         *\n         * @param token { String } value used to authorize a user based on this token value\n         * @param redirectRequest { IRedirectRequest } contains the object properties which are passed to the authorize api\n         */\n        _this.authorizeToken = function (token, redirectRequest) {\n            var parameters = _this.composeRedirectUrl(redirectRequest);\n            if (token) {\n                parameters.user_assertion = token;\n                parameters.user_assertion_type = 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer';\n            }\n            var postForm = _this.createAuthorizeForm(parameters);\n            postForm.submit();\n        };\n        return _this;\n    }\n    /**\n     * returns a html form containing all the properties from the parameter object\n     * @param parameters {object} contains the properties which will be passed to authorize api (as form submit post action)\n     */\n    SignInService.prototype.createAuthorizeForm = function (parameters) {\n        var formAction = Environment_1.default.baseUrlAdobe + \"/ims/authorize/v1\";\n        var form = document.createElement(\"form\");\n        form.setAttribute(\"method\", \"post\");\n        form.setAttribute(\"action\", formAction);\n        var formEl = null;\n        var paramValue = null;\n        var paramValueAsString = '';\n        for (var propertyName in parameters) {\n            paramValue = parameters[propertyName];\n            if (typeof paramValue === 'object') {\n                if (Object.keys(paramValue).length === 0) {\n                    continue;\n                }\n                paramValueAsString = JSON.stringify(paramValue);\n            }\n            else {\n                paramValueAsString = paramValue;\n            }\n            if (paramValueAsString !== '') {\n                formEl = this.createFormElement('input', 'text', propertyName, paramValueAsString);\n                form.appendChild(formEl);\n            }\n        }\n        document.getElementsByTagName(\"body\")[0]\n            .appendChild(form);\n        return form;\n    };\n    /**\n     * create a new html form element; this element will be added to the form\n     * @param inputType {String} input html element type\n     * @param type {String} type of the input element\n     * @param name {String} name of the input element\n     * @param value {String} value for the element\n     */\n    SignInService.prototype.createFormElement = function (inputType, type, name, value) {\n        var formElement = document.createElement(inputType);\n        formElement.setAttribute(\"type\", type);\n        formElement.setAttribute(\"name\", name);\n        formElement.setAttribute(\"value\", value);\n        return formElement;\n    };\n    return SignInService;\n}(BaseSignInService_1.BaseSignInService));\nexports.SignInService = SignInService;\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/adobe-ims/sign-in/SignInService.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/adobe-ims/sign-out/SignOutService.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/adobe-ims/sign-out/SignOutService.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar RedirectHelper_1 = __webpack_require__(/*! ../helpers/RedirectHelper */ \"./node_modules/@identity/imslib-thin/adobe-ims/helpers/RedirectHelper.js\");\nvar UrlHelper_1 = __importDefault(__webpack_require__(/*! ../../url/UrlHelper */ \"./node_modules/@identity/imslib-thin/url/UrlHelper.js\"));\nvar Environment_1 = __importDefault(__webpack_require__(/*! ../environment/Environment */ \"./node_modules/@identity/imslib-thin/adobe-ims/environment/Environment.js\"));\n/**\n * command responsable for user sign out\n */\nvar SignOutService = /** @class */ (function () {\n    function SignOutService() {\n        /**\n         * @param {IRedirectRequest} redirectRequest. contains all the necessary properties necessary for sign out\n         */\n        this.signOut = function (redirectRequest) {\n            var apiName = 'logout';\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            var apiParameters = redirectRequest.apiParameters, externalParameters = redirectRequest.externalParameters, _a = redirectRequest.adobeIdRedirectUri, adobeIdRedirectUri = _a === void 0 ? '' : _a, clientId = redirectRequest.clientId;\n            var apiExternalParams = RedirectHelper_1.RedirectHelper.mergeApiParamsWithExternalParams(apiParameters, externalParameters, apiName);\n            var redirectUrl = RedirectHelper_1.RedirectHelper.createDefaultRedirectUrl(adobeIdRedirectUri, clientId, apiExternalParams, apiName);\n            var parameters = __assign(__assign({}, apiExternalParams), { client_id: clientId, redirect_uri: redirectUrl, jslVersion: Environment_1.default.jslibver });\n            var queryStrings = UrlHelper_1.default.uriEncodeData(parameters);\n            var url = Environment_1.default.baseUrlAdobe + \"/ims/logout/v1?\" + queryStrings;\n            UrlHelper_1.default.replaceUrl(url);\n        };\n    }\n    return SignOutService;\n}());\nexports.SignOutService = SignOutService;\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/adobe-ims/sign-out/SignOutService.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/api-helpers/ApiHelpers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/api-helpers/ApiHelpers.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar ObjectUtil_1 = __webpack_require__(/*! ../util/ObjectUtil */ \"./node_modules/@identity/imslib-thin/util/ObjectUtil.js\");\n/**\n * class used to store the helper functions\n */\nvar ApiHelpers = /** @class */ (function () {\n    function ApiHelpers() {\n        /**\n       * Checks [adobeid.api_parameters]{@link adobeid} for custom parameters for an API.\n       * @param apiName - represents the used api name\n       * @param apiParameters - represents the parameters set from outside for api endpoints read from adobeId\n       * @returns {!Object}\n       */\n        this.getCustomApiParameters = function (apiParameters, apiName) {\n            return apiParameters[apiName] || {};\n        };\n    }\n    /**\n     *\n     * @param externalParameters external parameters received outside of the library\n     * @param apiParameters the api parameters from AdobeId data\n     * @param apiName api name\n     * @returns IDictionary representing the merged properties\n     */\n    ApiHelpers.prototype.mergeExternalParameters = function (externalParameters, apiParameters, apiName) {\n        return ObjectUtil_1.merge(this.getCustomApiParameters(apiParameters, apiName), externalParameters);\n    };\n    /***\n     * @param value {String} represents the\n     */\n    ApiHelpers.prototype.toJson = function (value) {\n        try {\n            if (typeof value !== 'string') {\n                return value;\n            }\n            return JSON.parse(value);\n        }\n        catch (_a) {\n            return null;\n        }\n    };\n    return ApiHelpers;\n}());\nexports[\"default\"] = new ApiHelpers();\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/api-helpers/ApiHelpers.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/constants/ImsConstants.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/constants/ImsConstants.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AdobeIdKey = 'adobeid';\nexports.AdobeIMSKey = 'adobeIMS';\nexports.AdobeImsFactory = 'adobeImsFactory';\nexports.DEFAULT_LANGUAGE = 'en_US';\nvar STORAGE_MODE;\n(function (STORAGE_MODE) {\n    STORAGE_MODE[\"LocalStorage\"] = \"local\";\n    STORAGE_MODE[\"SessionStorage\"] = \"session\";\n    STORAGE_MODE[\"MemoryStorage\"] = \"memory\";\n})(STORAGE_MODE = exports.STORAGE_MODE || (exports.STORAGE_MODE = {}));\nexports.HEADERS = {\n    AUTHORIZATION: 'Authorization',\n    X_IMS_CLIENT_ID: 'X-IMS-ClientId',\n    RETRY_AFTER: 'Retry-after',\n};\nexports.PROFILE_STORAGE_KEY = 'adobeid_ims_profile';\nexports.TOKEN_STORAGE_KEY = 'adobeid_ims_access_token';\nexports.ON_IMSLIB_INSTANCE = 'onImsLibInstance';\nexports.ASK_FOR_IMSLIB_INSTANCE_DOM_EVENT_NAME = 'getImsLibInstance';\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/constants/ImsConstants.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AdobeIMSThin\": () => (/* reexport safe */ _adobe_ims_AdobeIMSThin__WEBPACK_IMPORTED_MODULE_0__.AdobeIMSThin)\n/* harmony export */ });\n/* harmony import */ var _adobe_ims_AdobeIMSThin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adobe-ims/AdobeIMSThin */ \"./node_modules/@identity/imslib-thin/adobe-ims/AdobeIMSThin.js\");\n/* harmony import */ var _adobe_ims_AdobeIMSThin__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_adobe_ims_AdobeIMSThin__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/index.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/log/Log.js":
/*!*******************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/log/Log.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Wrapper for <code>console</code>. Checks <code>console</code> is available and <code>debug</code> Mode is enabled.\n *\n * @exports log\n *\n */\nvar Log = /** @class */ (function () {\n    function Log() {\n        var _this = this;\n        this.logEnabled = false;\n        /**\n         * Wrapper function.\n         *\n         * @param {String} method - Which <code>console</code> method to use.\n         * @param {*} args - Arguments object\n         *\n         * @private\n         */\n        this.print = function (method, args) {\n            if (!_this.logEnabled) {\n                return;\n            }\n            method.apply(void 0, __spread(args));\n        };\n        /**\n         * Writes an error to the console when the evaluated expression is false.\n         *\n         * @example\n         * log.assert(1 == 2, \"Counting is hard.\");\n         *\n         * @param {Boolean} expression - Expression to evaluate.\n         * @param {String} message - Message to print if <code>epxression</code> is <code>false</code>.\n         *\n         * @static\n         */\n        this.assert = function (val, message) {\n            _this.print(console.assert, [val, message]);\n        };\n        /**\n         * Writes an error to the console when the evaluated expression is false.\n         *\n         * @example\n         * log.assert(1 == 2, \"Counting is hard.\");\n         *\n         * @param {Boolean} expression - Expression to evaluate.\n         * @param {String} message - Message to print if <code>epxression</code> is <code>false</code>.\n         *\n         * @static\n         */\n        this.assertCondition = function (condition, message) {\n            if (!condition()) {\n                _this.print(console.error, [message]);\n            }\n        };\n        /**\n         * Prints a message similar to <code>console.log()</code>, styles the message like an error, and includes a stack\n         * trace from where the method wasval, called.\n         *\n         * @see {@link https://developers.google.com/web/tools/chrome-devtools/console/#filtering_the_console_output | Filtering the Console output}\n         *\n         * @example\n         * log.error(\"Define window.adobeid\", \"would you?!\");\n         * @param {String} message - Message to print.\n         */\n        this.error = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            _this.print(console.error, args);\n        };\n        /**\n         * logs a warnig message\n         */\n        this.warn = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            _this.print(console.warn, args);\n        };\n        /**\n         * Prints a message like <code>console.log()</code> but also shows an icon (blue circle with white \"i\") next to the\n         * output.\n         *\n         * <code>console.info()</code> can be filtered in the Console, whereas <code>console.log()</code> can not.\n         *\n         * @example\n         * log.info(\"Imslib.js Ready\", \"to Rumble\");\n         *\n         * @param {String} message - Message to print.\n         *\n         * @static\n         */\n        this.info = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            _this.print(console.info, args);\n        };\n    }\n    Log.prototype.enableLogging = function () {\n        this.logEnabled = true;\n    };\n    Log.prototype.disableLogging = function () {\n        this.logEnabled = false;\n    };\n    return Log;\n}());\nexports[\"default\"] = new Log();\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/log/Log.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/storage/MemoryStorage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/storage/MemoryStorage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * In-Memory polyFill for localStorage and sessionStorage.\n *\n * @constructor\n * @description Needed for Mac and iOS Safari (v <= 10) in Private Mode. Note that this object doesn't actually\n * persist data across refresh, it just implements the [Storage]{@link external:Storage} interface.\n * @exports memoryStorage\n */\nvar MemoryStorage = /** @class */ (function () {\n    function MemoryStorage() {\n        /**\n         * @type {!Object}\n         */\n        this.data = {};\n        /**\n         * property added in order to be compatible with Storage class\n         */\n        this.length = 0;\n    }\n    /**\n     * clear the memory data\n     */\n    MemoryStorage.prototype.clear = function () {\n        this.data = {};\n        this.length = 0;\n    };\n    /**\n     * @param key {String} represents the used key to get a value\n     * @returns {Object} the value associated with the input key\n     */\n    MemoryStorage.prototype.getItem = function (key) {\n        var value = this.data[key];\n        return value ? value : null;\n    };\n    /**\n     *\n     * @param key {string} represent the key which will be removed from memory\n     * @returns {boolean} true if the key is removed otherwise false\n     */\n    MemoryStorage.prototype.removeItem = function (key) {\n        if (!this.data[key]) {\n            return false;\n        }\n        delete this.data[key];\n        --this.length;\n        return true;\n    };\n    /**\n     * @key {String} - the used key to store a value into memory\n     * @value {any} - value associated with the input key\n     */\n    MemoryStorage.prototype.setItem = function (key, value) {\n        if (!this.data[key]) {\n            ++this.length;\n        }\n        this.data[key] = value;\n    };\n    MemoryStorage.prototype.key = function (index) {\n        throw new Error(\"Method not implemented. \" + index);\n    };\n    return MemoryStorage;\n}());\nexports.MemoryStorage = MemoryStorage;\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/storage/MemoryStorage.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/storage/StorageFactory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/storage/StorageFactory.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar MemoryStorage_1 = __webpack_require__(/*! ./MemoryStorage */ \"./node_modules/@identity/imslib-thin/storage/MemoryStorage.js\");\nvar ImsConstants_1 = __webpack_require__(/*! ../constants/ImsConstants */ \"./node_modules/@identity/imslib-thin/constants/ImsConstants.js\");\nvar Log_1 = __importDefault(__webpack_require__(/*! ../log/Log */ \"./node_modules/@identity/imslib-thin/log/Log.js\"));\n/**\n * A cross-browser way to use `sessionStorage`\n *\n * @exports storage\n * @requires MemoryStorage\n */\nvar StorageFactory = /** @class */ (function () {\n    function StorageFactory() {\n        this.memoryStorageInstance = null;\n    }\n    Object.defineProperty(StorageFactory.prototype, \"memoryStorage\", {\n        get: function () {\n            if (!this.memoryStorageInstance) {\n                this.memoryStorageInstance = new MemoryStorage_1.MemoryStorage();\n            }\n            return this.memoryStorageInstance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n    *\n    * @param storageName represents the storage name\n    * @returns the local or session storage; in case there is a problem with storage, the memory storage is returned\n    */\n    StorageFactory.prototype.getStorageByName = function (storageName) {\n        var storageInstance = this.getStorageInstanceByName(storageName);\n        if (!storageInstance) {\n            return this.memoryStorage;\n        }\n        return this.verifyStorage(storageInstance) ? storageInstance : this.memoryStorage;\n    };\n    /**\n     * method used to get the avilable storage and to give the possibility to mock the behaviour\n     * @param storageName the storage name used to get the storage\n     * @returns Storage or null\n     */\n    StorageFactory.prototype.getStorageInstanceByName = function (storageName) {\n        if (storageName === ImsConstants_1.STORAGE_MODE.MemoryStorage) {\n            return this.memoryStorage;\n        }\n        try {\n            return storageName === ImsConstants_1.STORAGE_MODE.LocalStorage ? window.localStorage : window.sessionStorage;\n        }\n        catch (ex) {\n            Log_1.default.warn('Please change your cookies settings in order to allow local data to be set');\n            return null;\n        }\n    };\n    /**\n     * returns the available storage; the priority is local storage and after that the session storage\n     * if no local or session storage is available, the Memory Storage is returned\n     */\n    StorageFactory.prototype.getAvailableStorage = function () {\n        var storage = this.getStorageByName(ImsConstants_1.STORAGE_MODE.LocalStorage);\n        if (storage instanceof MemoryStorage_1.MemoryStorage) {\n            return this.getStorageByName(ImsConstants_1.STORAGE_MODE.SessionStorage);\n        }\n        return storage;\n    };\n    /**\n     *\n     * @param storage represents the storage instance\n     * @returns true if storage is working as expected otherwise false\n     */\n    StorageFactory.prototype.verifyStorage = function (storage) {\n        var storageKey = 'test';\n        try {\n            storage.setItem(storageKey, 'true');\n            var storageValue = storage.getItem(storageKey);\n            if (storageValue !== 'true') {\n                return false;\n            }\n            storage.removeItem(storageKey);\n            return true;\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    return StorageFactory;\n}());\nexports[\"default\"] = new StorageFactory();\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/storage/StorageFactory.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/url/FragmentHelper.js":
/*!******************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/url/FragmentHelper.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar ApiHelpers_1 = __importDefault(__webpack_require__(/*! ../api-helpers/ApiHelpers */ \"./node_modules/@identity/imslib-thin/api-helpers/ApiHelpers.js\"));\n/**\n * class used to implement the main functions used for fragment\n */\nvar FragmentHelper = /** @class */ (function () {\n    function FragmentHelper() {\n    }\n    FragmentHelper.prototype.fragmentToObject = function () {\n        var currentHash = this.getHashFromURL();\n        if (!currentHash) {\n            return null;\n        }\n        var url = this.processHashUrl(currentHash);\n        var oldHash = this.getOldHash(url);\n        // fragment values should contain only values starting with old_hash\n        //this is in case when hash route is used: e.g.: https://localhost.corp.adobe.com:9000/#/cdn#old_hash=...\n        //#/cdn# should be ignored when getQueryParamsAsMap is called;\n        var urlWithoutRoute = oldHash ? url.slice(url.indexOf('old_hash')) : url;\n        var urlWithoutOldHash = this.removeOldHash(urlWithoutRoute);\n        var imsResponseAsMap = this.getQueryParamsAsMap(urlWithoutOldHash);\n        if (oldHash) {\n            imsResponseAsMap['old_hash'] = oldHash;\n        }\n        var stateAsString = imsResponseAsMap['state'];\n        if (stateAsString) {\n            imsResponseAsMap['state'] = ApiHelpers_1.default.toJson(stateAsString);\n        }\n        return imsResponseAsMap;\n    };\n    /**\n     * function used to determine the old_hash value contained into the source\n     * @param source {String} represents the input source used to determine the old_hash\n     * @returns {String}\n     */\n    FragmentHelper.prototype.getOldHash = function (source) {\n        if (!source) {\n            return '';\n        }\n        var match = source.match('old_hash=(.*?)&from_ims=true');\n        if (!match) {\n            return '';\n        }\n        return match[1];\n    };\n    /**\n     * remove the old hash value from the input string\n     * @param source {String} represents the input source\n     */\n    FragmentHelper.prototype.removeOldHash = function (source) {\n        if (!source) {\n            return source;\n        }\n        return source.replace(/old_hash=(.*?)&from_ims=true/gi, 'from_ims=true');\n    };\n    /**\n   * Gets the hash from an url.\n   * @param {string=} url The URL from which to get the hash.\n   * If missing use the current page's URL.\n   * @Note: the # is not returned from url\n   * @returns {string}\n   */\n    FragmentHelper.prototype.getHashFromURL = function (url) {\n        if (url === void 0) { url = window.location.href; }\n        var index = url.indexOf(\"#\");\n        return index !== -1 ? url.substring(index + 1) : \"\";\n    };\n    /**\n   * Parses a query string to a JSON.\n   * @NOTE Sometimes, the query string is actually a hash, due to inconsistent servers\n   * @param source {String}; represents the inpt strring value wich will be transformed to object\n   * @returns {!Object}\n   */\n    FragmentHelper.prototype.getQueryParamsAsMap = function (source) {\n        if (!source) {\n            return {};\n        }\n        var paramMap = {};\n        //in case the source starts with #, ? or &, the first character is removed. \n        source = source.replace(/^(#\\/|\\/|#|\\?|&)/, \"\");\n        source.split(\"&\").forEach(function (keyValuePair) {\n            if (keyValuePair.length) {\n                var arr = keyValuePair.split(\"=\");\n                paramMap[arr[0]] = decodeURIComponent(arr[1]);\n            }\n        });\n        return paramMap;\n    };\n    /**\n   * @param source {string} represent the input source wich will be processed\n   * The backend appends a second \"#\" sign to redirect_uri, even if it already contains one.\n   * @see https://jira.corp.adobe.com/browse/IMSB-4107554\n   */\n    FragmentHelper.prototype.processHashUrl = function (source) {\n        return source\n            .replace(\"?error\", \"#error\")\n            .replace(/#/gi, '&')\n            .replace('from_ims=true?', 'from_ims=true&');\n    };\n    return FragmentHelper;\n}());\nexports[\"default\"] = new FragmentHelper();\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/url/FragmentHelper.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/url/UrlHelper.js":
/*!*************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/url/UrlHelper.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * class used to implement the main functions used for query strings\n */\nvar UrlHelper = /** @class */ (function () {\n    function UrlHelper() {\n    }\n    /**\n   * Encodes data as a query string.\n   * @param {Object} data - The data.\n   * @returns {string} - The encoded string.\n    * @example\n    * encoded = uriEncodeData({\n    *   first: true,\n    *   foo: {\n    *     bar: 'foobar'\n    *   }\n    * }) // -> first=true&foo=%7B%22bar%22%3A%22foobar%22%7D\n    */\n    UrlHelper.prototype.uriEncodeData = function (data) {\n        if (typeof data !== 'object') {\n            return '';\n        }\n        var encodings = [];\n        var encodedValue = '';\n        var keyValue;\n        for (var key in data) {\n            keyValue = data[key];\n            if (keyValue === undefined) {\n                continue;\n            }\n            encodedValue = this.encodeValue(keyValue);\n            encodings.push(encodeURIComponent(key) + \"=\" + encodedValue);\n        }\n        return encodings.join(\"&\");\n    };\n    /**\n   * @param value : any; represents the value which will be encoded\n   * @returns string.\n   */\n    UrlHelper.prototype.encodeValue = function (value) {\n        if (value === null) {\n            return 'null';\n        }\n        if (typeof value === 'object') {\n            return encodeURIComponent(JSON.stringify(value));\n        }\n        return encodeURIComponent(value);\n    };\n    /**\n   * Opens the URL in the current page\n   *\n   * @param {!string} url\n   */\n    UrlHelper.prototype.replaceUrl = function (url) {\n        if (!url) {\n            return;\n        }\n        window.location.replace(url);\n    };\n    /**\n   * Opens the URL in the current page\n   * @param {!string} url\n   */\n    UrlHelper.prototype.setHrefUrl = function (url) {\n        if (!url) {\n            return;\n        }\n        window.location.href = url;\n    };\n    /**\n  * Change the hash from url to a new value without reloading the page\n  * @param hash {String} represents the new hash value\n  *\n  */\n    UrlHelper.prototype.setHash = function (hash) {\n        if (hash === void 0) { hash = ''; }\n        window.location.hash = hash;\n    };\n    return UrlHelper;\n}());\nexports[\"default\"] = new UrlHelper();\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/url/UrlHelper.js?");

/***/ }),

/***/ "./node_modules/@identity/imslib-thin/util/ObjectUtil.js":
/*!***************************************************************!*\
  !*** ./node_modules/@identity/imslib-thin/util/ObjectUtil.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// proudly found here: https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item !== null && item !== undefined && typeof item === 'object' && !Array.isArray(item));\n}\nexports.isObject = isObject;\n/**\n   * Deep merge two objects.\n   * @param target\n   * @param source\n   */\nfunction merge(target, source) {\n    if (target === null || target === undefined) {\n        return source;\n    }\n    if (target === source) {\n        return target;\n    }\n    if (!isObject(target)) {\n        return target;\n    }\n    var output = Object.assign({}, target);\n    if (isObject(source)) {\n        Object.keys(source).forEach(function (key) {\n            var _a, _b;\n            if (isObject(source[key])) {\n                if (!(key in target))\n                    Object.assign(output, (_a = {}, _a[key] = source[key], _a));\n                else\n                    output[key] = merge(target[key], source[key]);\n            }\n            else {\n                Object.assign(output, (_b = {}, _b[key] = source[key], _b));\n            }\n        });\n    }\n    return output;\n}\nexports.merge = merge;\n\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@identity/imslib-thin/util/ObjectUtil.js?");

/***/ })

}]);