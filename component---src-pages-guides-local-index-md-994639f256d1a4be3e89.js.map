{"version":3,"file":"component---src-pages-guides-local-index-md-994639f256d1a4be3e89.js","mappings":"wQAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,qBADR,sBAGA,kHACA,eACE,GAAM,uBADR,wBAGA,4EACA,oBACE,eAAIC,WAAW,MAAf,sBACA,eAAIA,WAAW,MAAf,cACA,eAAIA,WAAW,MAAf,qDAAyE,cAAGA,WAAW,KACnF,KAAQ,wCAD6D,wBAI3E,gVAAiU,cAAGA,WAAW,IAC3U,KAAQ,qBADqT,iBAAjU,YAGA,gLACA,eACE,GAAM,qBADR,sBAGA,mBAAG,mBAAQA,WAAW,KAAnB,6FACH,iIACA,oBACE,eAAIA,WAAW,MAAf,8DAAkF,cAAGA,WAAW,KAC5F,KAAQ,qCADsE,eAAlF,oBAGA,eAAIA,WAAW,MAAf,2CAA+D,uBAAYA,WAAW,MAAvB,UAA/D,KACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,0CACP,uBAAYA,WAAW,KAAvB,WAFL,sLAGA,eAAIA,WAAW,MAAf,qBAAyC,uBAAYA,WAAW,MAAvB,uBAAzC,UAAmH,uBAAYA,WAAW,MAAvB,sBAAnH,MACA,eAAIA,WAAW,MAAf,uDAA2E,uBAAYA,WAAW,MAAvB,mBAA3E,MACA,eAAIA,WAAW,MAAf,QAA4B,uBAAYA,WAAW,MAAvB,oBAA5B,wDAAiJ,uBAAYA,WAAW,MAAvB,qBAAjJ,eAA8N,uBAAYA,WAAW,MAAvB,iBAA9N,mIAGJ,eAAIA,WAAW,MAAf,YAAgC,uBAAYA,WAAW,MAAvB,eAAhC,KACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,eAApB,sDAAkI,uBAAYA,WAAW,MAAvB,aAAlI,MACA,eAAIA,WAAW,MAAf,qBAAyC,uBAAYA,WAAW,MAAvB,qBAAzC,QAA+G,uBAAYA,WAAW,MAAvB,4BAA/G,QAGJ,eAAIA,WAAW,MAAf,kDAEF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,sFAIL,eACE,GAAM,oBADR,qBAGA,mBAAG,mBAAQA,WAAW,KAAnB,iIAAwJ,eAAIA,WAAW,UAAf,QAAxJ,uCACH,4BACE,cAAGA,WAAW,cAAd,mKAEF,+GACA,oBACE,eAAIA,WAAW,MAAf,iIACA,eAAIA,WAAW,MAAf,YAAgC,uBAAYA,WAAW,MAAvB,eAAhC,KACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,eAApB,sDAAkI,uBAAYA,WAAW,MAAvB,aAAlI,MACA,eAAIA,WAAW,MAAf,qBAAyC,uBAAYA,WAAW,MAAvB,qBAAzC,QAA+G,uBAAYA,WAAW,MAAvB,4BAA/G,QAGJ,eAAIA,WAAW,MAAf,kDAEF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,yCAQTJ,EAAWK,gBAAiB","sources":["webpack://cc-everywhere/./src/pages/guides/local/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/cc-everywhere/cc-everywhere/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"local-development\"\n    }}>{`Local Development`}</h1>\n    <p>{`This guide contains the steps needed to begin serve your SDK and test your project locally.`}</p>\n    <h2 {...{\n      \"id\": \"domain-restrictions\"\n    }}>{`Domain Restrictions`}</h2>\n    <p>{`Adobe Create Embed SDK expects requests to come from:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`express.adobe.com`}</li>\n      <li parentName=\"ul\">{`localhost`}</li>\n      <li parentName=\"ul\">{`a domain that is registered to the client app in `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.adobe.com/console/\"\n        }}>{`Developer Console`}</a></li>\n    </ul>\n    <p>{`When a client application first calls the SDK, the user is prompted to authenticate the application. Once a user authenticates, Adobe's Identity Management Server (IMS) will redirect the client to a redirect URI registered in the Console.  To learn more about how to configure OAuth for your application, read the `}<a parentName=\"p\" {...{\n        \"href\": \"../authorization/\"\n      }}>{`authorization`}</a>{` guide.`}</p>\n    <p>{`All non-localhost redirect URIs need a valid SSL certificate to redirect the client after sign-ins and subsequently save access tokens onto client pages.`}</p>\n    <h2 {...{\n      \"id\": \"testing-via-https\"\n    }}>{`Testing via https`}</h2>\n    <p><strong parentName=\"p\">{`Your production server will need a public key and a signed certificate to enable https.`}</strong></p>\n    <p>{`To start trying out the SDK, we have included some steps for setting up a simple http server at port 8000:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Install Homebrew. Homebrew is a package installer: follow `}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.brew.sh/Installation\"\n        }}>{`these steps`}</a>{` to install it.`}</li>\n      <li parentName=\"ol\">{`Create a key and SSL certificate using `}<inlineCode parentName=\"li\">{`mkcert`}</inlineCode>{`.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://github.com/FiloSottile/mkcert\"\n            }}><inlineCode parentName=\"a\">{`mkcert`}</inlineCode></a>{` is a simple tool for making locally-trusted development certificates. It automatically installs a local CA in the system root store, and generates locally-trusted certificates.`}</li>\n          <li parentName=\"ul\">{`Install it using `}<inlineCode parentName=\"li\">{`brew install mkcert`}</inlineCode>{`, NOT `}<inlineCode parentName=\"li\">{`npm install mkcert`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`Configure a local certificate authority by running `}<inlineCode parentName=\"li\">{`mkcert -install`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`Run `}<inlineCode parentName=\"li\">{`mkcert localhost`}</inlineCode>{` in the project root. This will generate two files: `}<inlineCode parentName=\"li\">{`localhost-key.pem`}</inlineCode>{` (key) and `}<inlineCode parentName=\"li\">{`localhost.pem`}</inlineCode>{` (certificate). Our https server is instantiated in the next step with these two files so that the browser trusts localhost.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Install `}<inlineCode parentName=\"li\">{`http-server`}</inlineCode>{`.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`http-server`}</inlineCode>{` lets you make files or directories available via `}<inlineCode parentName=\"li\">{`localhost`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`Install it using `}<inlineCode parentName=\"li\">{`npm i http-server`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`brew install http-server`}</inlineCode>{`.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Run the following line in your project root:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` http-server -S -C ./localhost.pem -K ./localhost-key.pem -p 8000 -a localhost\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"testing-via-http\"\n    }}>{`Testing via http`}</h2>\n    <p><strong parentName=\"p\">{`Integrations must be submitted with https redirect URIs to be approved for production, but http URIs are accepted in Console `}<em parentName=\"strong\">{`only`}</em>{` for testing localhost instances.`}</strong></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: The \"Default Redirect URI\" field will still expect a https pattern, but including the http URI in the \"Redirect URI Patterns\" field will be sufficient.`}</p>\n    </blockquote>\n    <p>{` We have included some steps for getting started with a simple http server at port 8000:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Install npm or Homebrew. npm is installed when you install Node, and Homebrew is another package installer that you can use.`}</li>\n      <li parentName=\"ol\">{`Install `}<inlineCode parentName=\"li\">{`http-server`}</inlineCode>{`.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`http-server`}</inlineCode>{` lets you make files or directories available via `}<inlineCode parentName=\"li\">{`localhost`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`Install it using `}<inlineCode parentName=\"li\">{`npm i http-server`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`brew install http-server`}</inlineCode>{`.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Run the following line in your project root:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` http-server -p 8000 -a localhost\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}