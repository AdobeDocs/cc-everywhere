{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/ccx_editor/create_project/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,wBADR,yBAGA,iGACA,eACE,GAAM,gBADR,mBAGA,gFAAiE,uBAAYC,WAAW,KAAvB,kBAAjE,cACA,6BACA,oBACE,eAAIA,WAAW,MAAf,kBAAsC,uBAAYA,WAAW,MAAvB,kBAAtC,qFACA,eAAIA,WAAW,MAAf,2FACA,eAAIA,WAAW,MAAf,mIAEF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,oEAIL,mEAAoD,uBAAYA,WAAW,KAAvB,sBAApD,mBAIA,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,wDADQ,eAApB,0CAGA,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,4DADQ,eAApB,qDAGA,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,4DADQ,gBAApB,kBAGA,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,sDADQ,aAApB,OAIF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,okBAwBL,4CAA6B,uBAAYA,WAAW,KAAvB,sBAA7B,mEAA8J,uBAAYA,WAAW,KAAvB,aAA9J,2IACA,eACE,GAAM,WADR,YAGA,2GACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,m3DA4DL,mBAAG,mBAAQA,WAAW,KAAnB,SAAH,MACA,oBACE,eAAIA,WAAW,MAAf,SAA6B,uBAAYA,WAAW,MAAvB,aAA7B,4DAA+I,uBAAYA,WAAW,MAAvB,aAA/I,4EACA,eAAIA,WAAW,MAAf,+HACA,eAAIA,WAAW,MAAf,+GAEF,0HAA2G,cAAGA,WAAW,IACrH,KAAQ,4BAD+F,iCAA3G,yBAOJJ,EAAWK,gBAAiB","file":"component---src-pages-guides-ccx-editor-create-project-index-md-6e050fb59ec19e2b73ac.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/cc-everywhere/cc-everywhere/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"creating-new-project\"\n    }}>{`Creating New Project`}</h1>\n    <p>{`This guide will demonstrate how to launch a CCX editor with a new project.`}</p>\n    <h2 {...{\n      \"id\": \"createdesign\"\n    }}>{`createDesign()`}</h2>\n    <p>{`You can launch a CCX editor with a new project, using the `}<inlineCode parentName=\"p\">{`createDesign()`}</inlineCode>{` method. `}</p>\n    <p>{`Flow: `}</p>\n    <ul>\n      <li parentName=\"ul\">{`User triggers `}<inlineCode parentName=\"li\">{`createDesign()`}</inlineCode>{` function from within your application, and a CCX editor is loaded in an iframe.`}</li>\n      <li parentName=\"ul\">{`A pop-up window will appear and the user has to create or log into their CCX account. `}</li>\n      <li parentName=\"ul\">{`Any projects are automatically created/saved in a new project folder ('app_name' specified in SDK initialization) within CCX.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`createDesign(createDesignParams: CreateDesignParams) => void\n`}</code></pre>\n    <p>{`This function takes an object of parameters, `}<inlineCode parentName=\"p\">{`createDesignParams`}</inlineCode>{`, composed of:`}</p>\n    {\n      /* TODO: fix reference links */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../reference/shared_types/index.md#modalparams\"\n        }}>{`modalParams`}</a>{`: determines size of CCX editor modal`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../reference/ccx_editor/index.md#createinputparams\"\n        }}>{`inputParams`}</a>{` canvasAspectId, template types, template search`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../reference/shared_types/index.md#ccxoutputparams\"\n        }}>{`outputParams`}</a>{`: output type`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../reference/shared_types/index.md#callbacks\"\n        }}>{`callbacks`}</a>{` `}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Initialize SDK and save CCEverywhere object as ccEverywhere \nccEverywhere.createDesign(\n    {\n        modalParams: {},\n        callbacks: {\n            onCancel: () => {},\n            onError: (err) => {},\n            onLoadStart: () => {},\n            onLoad: () => {},\n            onPublishStart: () => {},\n            onPublish: (publishParams) => {},\n        },\n        outputParams: { \n            outputType: \"base64\"\n        },\n        inputParams: { \n            canvasAspectId: \"1:2\",\n            templateType: \"Flyers\",\n        }\n    }\n); \n`}</code></pre>\n    <p>{`All the properties in `}<inlineCode parentName=\"p\">{`CreateDesignParams`}</inlineCode>{` are optional. You will probably want to add some code to your `}<inlineCode parentName=\"p\">{`onPublish`}</inlineCode>{` callback to send the image data and project ID information back to your own app. The longer example at the bottom demonstrates this. `}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`When the \"createDesign\" button is clicked, the CCX editor is launched in an iframe. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Create Project Sample</title>\n  </head>  \n  <body>\n    <button id=\"create-project-button\">Create project</button>\n    <img id=\"image-container\" height=\"420\" width=\"420\" />\n\n    <script type=\"text/javascript\" src=\"./CCEverywhere.js\"></script>\n    <script type=\"text/javascript\">\n\n    /* Initialize projectId to null until it gets set by onPublish callback */\n    var projectId = null;\n    /* Set to null until CCEverywhere object is initialized */\n    var ccEverywhere = null;\n    var imageContainer = document.getElementById(\"image-container\");\n    const createButton = document.getElementById(\"create-project-button\");\n        \n    ccEverywhere = CCEverywhere.default.initialize(\n        {\n            clientId: YOUR_CLIENT_ID,\n            appName: PROJECT_NAME,\n            appVersion: { major: 1, minor: 0 },\n            platformCategory: 'web', \n            redirectUri: YOUR_REDIRECT_URI\n        }\n    );\n\n    createButton.onclick = () => {\n        const createDesignCallback = {\n            onCancel: () => {},\n            onPublish: (publishParams) => {\n                /* User clicked \"Save\"\n                   Save image data to render in sample\n                   Save projectId for editing later */\n                const localData = { \n                    project: publishParams.projectId, \n                    image: publishParams.asset.data \n                };\n                imageContainer.src = localData.image;\n                projectId = localData.project; \n            },\n            onError: (err) => {\n                console.error('Error received is', err.toString());\n            },\n        };\n    \n        ccEverywhere.createDesign(\n            {\n                callbacks: createDesignCallback\n            }\n        );  \n    }\n    </script>\n  </body> \n</html>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Notes`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`When `}<inlineCode parentName=\"li\">{`onPublish`}</inlineCode>{` is called, we save the project ID in a global variable `}<inlineCode parentName=\"li\">{`projectId`}</inlineCode>{` so that we can pre-load it when invocating the Open Project API later.`}</li>\n      <li parentName=\"ul\">{`\"imageContainer\" is the ID of an image element, and its source tag is updated to reflect the created project, once saved. `}</li>\n      <li parentName=\"ul\">{`\"create-project-button\" is the ID of a button element, and click events on this button launch the editor.`}</li>\n    </ul>\n    <p>{`Now that you have created a project and rendered the final design onto your own page, let's explore `}<a parentName=\"p\" {...{\n        \"href\": \"../edit_project/index.md\"\n      }}>{`loading pre-existing projects`}</a>{` into a CCX editor. `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}