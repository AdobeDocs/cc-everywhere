{"version":3,"file":"component---src-pages-guides-full-editor-create-project-index-md-041f0f8f054c9de07a6d.js","mappings":"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","sources":["webpack://cc-everywhere/./src/pages/guides/full_editor/create_project/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/cc-everywhere/cc-everywhere/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"creating-new-projects-using-the-full-editor\"\n    }}>{`Creating new projects using the full editor`}</h1>\n    <InlineAlert variant=\"error\" slots=\"header, text\" mdxType=\"InlineAlert\" />\n    <p>{`IMPORTANT: Deprecation Warning`}</p>\n    <p>{`We are no longer approving integrations using v1 or v2 of the SDK - both versions will be deprecated in 2024.`}</p>\n    <p>{`This guide will demonstrate how to use the embedded full editor in your own application.`}</p>\n    <h2 {...{\n      \"id\": \"createdesign\"\n    }}>{`createDesign()`}</h2>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"../../../reference/index.md#cceverywhere\"\n      }}>{`CCEverywhere`}</a>{` object exposes the `}<inlineCode parentName=\"p\">{`createDesign()`}</inlineCode>{` method, which loads the editor component in an iframe.`}</p>\n    <h3 {...{\n      \"id\": \"flow\"\n    }}>{`Flow`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`User triggers `}<inlineCode parentName=\"li\">{`createDesign()`}</inlineCode>{` function from within the host application, and an editor is loaded in an iframe.`}</li>\n      <li parentName=\"ul\">{`A pop-up window will appear and the user has to create or log into their Adobe Express account.`}</li>\n      <li parentName=\"ul\">{`Any projects are automatically created/saved in a new project folder ('app_name' specified in SDK initialization) in the user's Adobe Express account.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Initialize the SDK before this \nccEverywhere.createDesign(\n    // CreateDesignParams\n    {\n        outputParams: { \n            outputType: \"base64\"\n        },\n        inputParams: { \n            canvasSize: \"1:2\",\n            templateType: \"brochure\",\n            // You can also load an image into the project \n            // asset : \"...\"\n        }\n    }\n); \n`}</code></pre>\n    <h2 {...{\n      \"id\": \"createdesignparams\"\n    }}>{`CreateDesignParams`}</h2>\n    <p><inlineCode parentName=\"p\">{`createDesign()`}</inlineCode>{` takes an object of parameters, `}<inlineCode parentName=\"p\">{`CreateDesignParams`}</inlineCode>{`, composed of:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`callbacks`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../../reference/types/index.md#callbacks\"\n            }}>{`Callbacks`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Callback methods`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`modalParams`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../../reference/types/index.md#modalparams\"\n            }}>{`ModalParams`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Parameters to configure editor/modal UI`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`inputParams`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#createinputparams\"\n            }}>{`CreateInputParams`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Input parameters when creating a design`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`outputParams`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../../reference/types/index.md#ccxoutputparams\"\n            }}>{`CCXOutputParams`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Desired output options when exporting assets from the editor`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`All the properties in `}<inlineCode parentName=\"p\">{`CreateDesignParams`}</inlineCode>{` are optional.`}</p>\n    <h3 {...{\n      \"id\": \"createinputparams\"\n    }}>{`CreateInputParams`}</h3>\n    <p><inlineCode parentName=\"p\">{`CreateInputParams`}</inlineCode>{` allows you to configure the embedded editor.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`canvasSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../../reference/types/index.md#size\"\n            }}>{`Size`}</a>{`/`}<a parentName=\"td\" {...{\n              \"href\": \"../../../reference/types/index.md#canvasaspectid\"\n            }}>{`CanvasAspectId`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Launch the editor with canvas set at this size.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`asset`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../../reference/types/index.md#asset\"\n            }}>{`Asset`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Asset object that contains the base64-encoded image data you want the editor to open.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`editorPanelView`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../../reference/types/index.md#editorpanelview\"\n            }}>{`EditorPanelView`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Determines which panel view to open by default.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`exportOptions`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../../reference/types/index.md#exportoptions\"\n            }}>{`ExportOptions`}</a>{`[]`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Export options for the asset that is created. If no export options are specified, the editor falls back to the default layout options.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`panelSearchText`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Search text to pass in the editor for selected panel.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`templateType`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../../../reference/types/index.md#templatetype\"\n            }}>{`TemplateType`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Specify template type for canvas.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`View the full list of `}<a parentName=\"p\" {...{\n        \"href\": \"../../../reference/types/index.md#canvasaspectid\"\n      }}>{`canvas sizes`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"../../../reference/types/index.md#templatetype\"\n      }}>{`template types`}</a></p>\n    <h2 {...{\n      \"id\": \"example-create-new-project\"\n    }}>{`Example: Create new project`}</h2>\n    <p>{`The following code will invoke the full editor. It appears in a modal. When the user finishes in the editor and saves/publishes their design, the `}<inlineCode parentName=\"p\">{`onPublish`}</inlineCode>{` callback is invoked. Resulting project data is sent in `}<inlineCode parentName=\"p\">{`publishParams`}</inlineCode>{`. In this example, we save the project info (`}<inlineCode parentName=\"p\">{`project_id`}</inlineCode>{`) and display the image data (of the first page of the user's design) in some image container `}<inlineCode parentName=\"p\">{`image_data`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\",\n        \"metastring\": \"title=\\\"create-new-project.js\\\"\",\n        \"title\": \"\\\"create-new-project.js\\\"\"\n      }}>{`ccEverywhere.createDesign(\n    {\n        callbacks: createDesignCallback,\n        outputParams: {\n            outputType: \"base64\",\n        }\n    }\n);  \nconst createDesignCallback = {\n    onCancel: () => {},\n    onPublish: (publishParams) => {\n        console.log(publishParams)\n        const localData = { project: publishParams.asset[0].projectId, image: publishParams.asset[0].data };\n        image_data.src = localData.image;\n        project_id = localData.project;\n    },\n    onError: (err) => {\n        console.error('Error received is', err.toString());\n    },\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example-create-from-asset\"\n    }}>{`Example: Create from asset`}</h2>\n    <p>{`To launch the editor with a starting asset, the `}<inlineCode parentName=\"p\">{`createDesign`}</inlineCode>{` API takes a `}<inlineCode parentName=\"p\">{`asset`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`inputParams`}</inlineCode>{`. When the user finishes in the editor and saves/publishes their design, the `}<inlineCode parentName=\"p\">{`onPublish`}</inlineCode>{` callback is invoked. Resulting project data is sent in `}<inlineCode parentName=\"p\">{`publishParams`}</inlineCode>{`. In this example, we save the project info (`}<inlineCode parentName=\"p\">{`project_id`}</inlineCode>{`) and display the image data (of the first page of the user's design) in some image container `}<inlineCode parentName=\"p\">{`image_data`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\",\n        \"metastring\": \"title=\\\"create-from-asset.js\\\" hl_lines=\\\"5\\\"\",\n        \"title\": \"\\\"create-from-asset.js\\\"\",\n        \"hl_lines\": \"\\\"5\\\"\"\n      }}>{`ccEverywhere.createDesign(\n    {\n        callbacks: createDesignCallback,\n        inputParams: {\n            asset: \"<base-64 encoded image data>\"\n        },\n        outputParams: {\n            outputType: \"base64\",\n        }\n    }\n);  \nconst createDesignCallback = {\n    onCancel: () => {},\n    onPublish: (publishParams) => {\n        const localData = { project: publishParams.asset[0].projectId, image: publishParams.asset[0].data };\n        image_data.src = localData.image;\n        project_id = localData.project;\n    },\n    onError: (err) => {\n        console.error('Error received is', err.toString());\n    },\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","variant","slots","parentName","isMDXComponent"],"sourceRoot":""}