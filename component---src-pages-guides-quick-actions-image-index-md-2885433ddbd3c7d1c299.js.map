{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/quick_actions/image/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,uBADR,wBAGA,2TACA,eACE,GAAM,mBADR,sBAGA,8DAA+C,cAAGC,WAAW,IACzD,KAAQ,4CADmC,gBAA/C,sDAE+E,uBAAYA,WAAW,KAAvB,qBAF/E,cAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,ycAqBL,eACE,GAAM,qBADR,sBAGA,mBAAG,uBAAYA,WAAW,KAAvB,qBAAH,qBAAqF,uBAAYA,WAAW,KAAvB,qBAArF,wBACA,oBACE,eAAIA,WAAW,MAAf,QAA4B,cAAGA,WAAW,KACtC,KAAQ,2DADgB,mBAG5B,eAAIA,WAAW,MAAf,iBAAqC,cAAGA,WAAW,KAC/C,KAAQ,mEADyB,2BAGnC,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,kDADQ,SAApB,0DAGA,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,0DADQ,iBAApB,8EAKJ,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,sDADQ,eAGpB,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,wDADQ,eAApB,mCAIF,+BAAgB,cAAGA,WAAW,IAC1B,KAAQ,kBADI,iBAAhB,2CAGA,eACE,GAAM,iBADR,kBAGA,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,QADX,iBAGA,eAAIA,WAAW,KACb,MAAS,QADX,oBAKJ,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,QADX,eAGA,eAAIA,WAAW,KACb,MAAS,QADX,kBAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,QADX,mBAGA,eAAIA,WAAW,KACb,MAAS,QADX,sBAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,QADX,mBAGA,eAAIA,WAAW,KACb,MAAS,QADX,sBAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,QADX,iBAGA,eAAIA,WAAW,KACb,MAAS,QADX,oBAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,QADX,sBAGA,eAAIA,WAAW,KACb,MAAS,QADX,2BAMN,eACE,GAAM,WADR,YAGA,eACE,GAAM,uEADR,6EAGA,oBACE,eAAIA,WAAW,MAAf,6JACA,eAAIA,WAAW,MAAf,iCAAqD,uBAAYA,WAAW,MAAvB,qBAArD,cAAiI,uBAAYA,WAAW,MAAvB,qBAAjI,wBACA,eAAIA,WAAW,MAAf,mHAEF,eACE,GAAM,mEADR,yEAGA,oBACE,eAAIA,WAAW,MAAf,0IAEF,2EACA,oBACE,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,aAApB,sDACA,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,YAApB,yBAEF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,k5FAwGTJ,EAAWK,gBAAiB","file":"component---src-pages-guides-quick-actions-image-index-md-2885433ddbd3c7d1c299.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/cc-everywhere/cc-everywhere/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"image-quick-actions\"\n    }}>{`Image Quick Actions`}</h1>\n    <p>{`Each Image Quick Actions component is loaded into the host application as an iframe, like the CCX editor component. It can be launched with an image asset attached (jpg/png). If no input asset is provided, the modal will automatically prompt the user to browse their device for a image file. `}</p>\n    <h2 {...{\n      \"id\": \"openquickaction\"\n    }}>{`openQuickAction()`}</h2>\n    <p>{`After the SDK has been initialized, the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../reference/index.md#cceverywhere\"\n      }}>{`CCEverywhere`}</a>{` object exposes these Image Quick Actions via the `}<inlineCode parentName=\"p\">{`openQuickAction()`}</inlineCode>{` method. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`ccEverywhere.openQuickAction(\n    // QuickActionsParams\n    {\n        id: 'image-crop', \n        inputParams: {\n            exportOptions: []\n        },\n        callbacks: {\n            onCancel: () => {},\n            onError: (err) => {},\n            onLoadStart: () => {},\n            onLoad: () => {},\n            onPublishStart: () => {},\n            onPublish: (publishParams) => {},\n        },\n        modalParams: {},\n    }\n)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"quickactionparams\"\n    }}>{`QuickActionParams`}</h3>\n    <p><inlineCode parentName=\"p\">{`openQuickAction()`}</inlineCode>{` takes an object `}<inlineCode parentName=\"p\">{`QuickActionParams`}</inlineCode>{` with 4 parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`id: `}<a parentName=\"li\" {...{\n          \"href\": \"../../../reference/quick_actions/index.md#quickactionid\"\n        }}>{`QuickActionId`}</a></li>\n      <li parentName=\"ul\">{`inputParams: `}<a parentName=\"li\" {...{\n          \"href\": \"../../../reference/quick_actions/index.mdquickactioninputparams\"\n        }}>{`QuickActionInputParams`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"../../../reference/shared_types/index.md#asset\"\n            }}>{`asset`}</a>{`: object representing data, data format, type of data`}</li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"../../../reference/quick_actions/index.md#exportoption\"\n            }}>{`exportOptions`}</a>{`: array of configurable export options (i.e. open in Express, download)`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../reference/shared_types/index.md#callbacks\"\n        }}>{`Callbacks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../reference/shared_types/index.md#modalparams\"\n        }}>{`modalParams`}</a>{`: determines size of QA modal`}</li>\n    </ul>\n    <p>{`Only the `}<a parentName=\"p\" {...{\n        \"href\": \"#quickactionid\"\n      }}>{`QuickActionId`}</a>{` is required to initialize the iframe.`}</p>\n    <h3 {...{\n      \"id\": \"quickactionid\"\n    }}>{`QuickActionId`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Quick Action`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`QuickActionId`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Crop Image`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`'image-crop'`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Convert to JPG`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`'convert-to-jpg'`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Convert to PNG`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`'convert-to-png'`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Resize Image`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`'image-resize'`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Remove Background`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`'remove-background'`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <h4 {...{\n      \"id\": \"flow-1-user-uploads-an-image-asset-and-clicks-the-image-crop-button\"\n    }}>{`Flow 1: User uploads an image asset, and clicks the \"Image Crop\" button.`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`After a user uploads an image, a FileReader object is instantiated and converts the file to a base64 data type and saves it to the variable \"imageUrl\". `}</li>\n      <li parentName=\"ul\">{`This \"imageUrl\" is passed as `}<inlineCode parentName=\"li\">{`inputParams.asset`}</inlineCode>{` when the `}<inlineCode parentName=\"li\">{`openQuickAction()`}</inlineCode>{` method is called. `}</li>\n      <li parentName=\"ul\">{`The Image Crop QA Component is launched in an iframe, and the user can crop the uploaded image as they wish. `}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"flow-2-user-clicks-the-image-crop-button-with-no-asset-attached\"\n    }}>{`Flow 2: User clicks the \"Image Crop\" button, with no asset attached.`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`The Image Crop QA component is launched in an iframe. The user will have to browse for an image asset to perform the image crop on. `}</li>\n    </ul>\n    <p>{`Finally, users can choose between 2 export options: `}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Customize`}</strong>{`: to continue designing in a CCX editor component`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Download`}</strong>{`: to save the asset`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n  <title>Quick Actions</title>\n  </head>\n    \n  <body>\n    <h1> Image Quick Action Example </h1>\n    <input type=\"file\" id=\"fileInput\" />\n    <img id=\"image-container\" height=\"420\" width=\"420\" />\n    <button id=\"image-crop\"> Crop Image </button>\n\n    <script type=\"text/javascript\" src=\"CCEverywhere.js\"></script>\n    <script type=\"text/javascript\" >\n\n    const PROJECT_NAME = 'cc everywhere';\n    /* file: user uploaded file\n    imageUrl: base64 representation we pass into QA function */\n    var file, imageUrl;\n    /*  appImage is the image container displayed in sample */\n    var appImage = document.getElementById('image-container');\n\n    /* This event listener checks to see if the user uploads a new file and reads it into base64 data type for SDK ingestion later */\n    \n    document.getElementById('fileInput')\n    .addEventListener('change', (e) => {\n        const reader = new FileReader();\n        file = e.target.files[0];\n        /* reads file into base 64 data type */\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n            let encodedImage = reader.result;\n            /*  save encoded image into imageUrl */\n            imageUrl = encodedImage;\n        }\n        reader.onerror = (error) => {\n            console.log('error', error);\n        };\n    })\n\n    var ccEverywhere = CCEverywhere.default.initialize(\n        {\n            clientId: YOUR_CLIENT_ID,\n            appName: PROJECT_NAME,\n            appVersion: { major: 1, minor: 0 },\n            platformCategory: 'web',\n            redirectUri: YOUR_REDIRECT_URI\n        }\n    );\n\n    const exportOptions = [\n        /* Customize export button */\n        {\n            target: 'Editor',\n            variant: 'cta',\n            optionType: 'button',\n            buttonType: 'native'\n        },\n        /* Download export button */\n        {\n            target: 'Download',\n            variant: 'primary',\n            optionType: 'button',\n            buttonType: 'native'\n        }\n    ];\n\n    const callbacks = {\n        onCancel: () => {},\n        onPublish: (publishParams) => {\n            imageUrl = publishParams.asset.data;\n            appImage.src = imageUrl;\n        },\n        onError: (err) => {\n            console.error('Error received is', err.toString())\n        }\n    }\n\n    document.getElementById('image-crop')\n    .addEventListener('click', () => {\n        ccEverywhere.openQuickAction({\n            id: 'image-crop', \n            inputParams: {\n                asset: {\n                    data: imageUrl, \n                    dataType: 'base64', \n                    type: 'image'\n                }, \n                exportOptions: exportOptions\n            },\n            callbacks: callbacks,\n            modalParams: {},\n        })\n    })\n    </script>\n  </body> \n</html>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}