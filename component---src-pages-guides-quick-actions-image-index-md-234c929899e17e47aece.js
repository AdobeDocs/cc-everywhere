(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[253],{4536:function(e,n,a){"use strict";a.r(n),a.d(n,{_frontmatter:function(){return d},default:function(){return s}});var t=a(22122),r=a(19756),i=(a(15007),a(64983)),o=a(99536),m=["components"],d={},l={_frontmatter:d},p=o.Z;function s(e){var n=e.components,a=(0,r.Z)(e,m);return(0,i.mdx)(p,(0,t.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"image-quick-actions"},"Image Quick Actions"),(0,i.mdx)("p",null,"After the SDK has been initialized, the CCEverywhere object exposes these Image Quick Actions via the ",(0,i.mdx)("inlineCode",{parentName:"p"},"openQuickAction()")," method. "),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:"left"},"Quick Action"),(0,i.mdx)("th",{parentName:"tr",align:"left"},"QuickActionId"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},"Crop Image"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"'image-crop'")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},"Convert to JPG"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"'convert-to-jpg'")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},"Convert to PNG"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"'convert-to-png'")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},"Resize Image"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"'image-resize'")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},"Remove Background"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"'remove-background'")))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"openQuickAction(params: QuickActionParams) => void\n")),(0,i.mdx)("p",null,"This method triggers an iframe to perform the Quick Action, and takes an object of parameters of type ",(0,i.mdx)("strong",{parentName:"p"},"QuickActionParams"),":"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"id: QuickActionId"),(0,i.mdx)("li",{parentName:"ul"},"inputParams: ",(0,i.mdx)("a",{parentName:"li",href:"../../../reference/quick_actions/index.mdquickactioninputparams"},"QuickActionInputParams"),(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"../../../reference/shared_types/index.md#asset"},"asset"),": object representing data, data format, type of data"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"../../../reference/quick_actions/index.md#exportoption"},"exportOptions"),": array of configurable export options (i.e. open in Express, download)"))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"../../../reference/shared_types/index.md#callbacks"},"Callbacks")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"../../../reference/shared_types/index.md#modalparams"},"modalParams"),": determines size of QA modal")),(0,i.mdx)("p",null,"Only the Quick Action ID is required to initialize a QA modal. If no input parameters are provided, the modal will automatically prompt the user to browse their device for a image file. "),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"ccEverywhere.openQuickAction({\n    id: 'image-crop', \n    inputParams: {\n        exportOptions: []\n    },\n    callbacks: {\n        onCancel: () => {},\n        onError: (err) => {},\n        onLoadStart: () => {},\n        onLoad: () => {},\n        onPublishStart: () => {},\n        onPublish: (publishParams) => {},\n    },\n    modalParams: {},\n})\n")),(0,i.mdx)("h2",{id:"example"},"Example"),(0,i.mdx)("p",null,'After a user uploads a file to the example, a FileReader object is instantiated and converts the file to a base64 data type and saves it to the variable "imageUrl". '),(0,i.mdx)("p",null,'They can then click the "Image Crop" button, which call the Quick Actions API. A CCX modal is launched, and the user can crop the image as they wish. They can click "Customize" to continue designing in a CCX editor, or download the asset.'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-html"},"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n  <title>Quick Actions</title>\n  </head>\n    \n  <body>\n    <h1> Image Quick Action Example </h1>\n    <input type=\"file\" id=\"fileInput\" />\n    <img id=\"image-container\" height=\"420\" width=\"420\" />\n    <button id=\"image-crop\"> Crop Image </button>\n\n    <script type=\"text/javascript\" src=\"CCEverywhere.js\"><\/script>\n    <script type=\"text/javascript\" >\n\n    const PROJECT_NAME = 'cc everywhere';\n    /* file: user uploaded file\n    imageUrl: base64 representation we pass into QA function */\n    var file, imageUrl;\n    /*  appImage is the image container displayed in sample */\n    var appImage = document.getElementById('image-container');\n\n    /* This event listener checks to see if the user uploads a new file and reads it into base64 data type for SDK ingestion later */\n    \n    document.getElementById('fileInput')\n    .addEventListener('change', (e) => {\n        const reader = new FileReader();\n        file = e.target.files[0];\n        /* reads file into base 64 data type */\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n            let encodedImage = reader.result;\n            /*  save encoded image into imageUrl */\n            imageUrl = encodedImage;\n        }\n        reader.onerror = (error) => {\n            console.log('error', error);\n        };\n    })\n\n    var ccEverywhere = CCEverywhere.default.initialize(\n        {\n            clientId: YOUR_CLIENT_ID,\n            appName: PROJECT_NAME,\n            appVersion: { major: 1, minor: 0 },\n            platformCategory: 'web',\n            redirectUri: YOUR_REDIRECT_URI\n        }\n    );\n\n    const exportOptions = [\n        /* Customize export button */\n        {\n            target: 'Editor',\n            variant: 'cta',\n            optionType: 'button',\n            buttonType: 'native'\n        },\n        /* Download export button */\n        {\n            target: 'Download',\n            variant: 'primary',\n            optionType: 'button',\n            buttonType: 'native'\n        }\n    ];\n\n    const callbacks = {\n        onCancel: () => {},\n        onPublish: (publishParams) => {\n            imageUrl = publishParams.asset.data;\n            appImage.src = imageUrl;\n        },\n        onError: (err) => {\n            console.error('Error received is', err.toString())\n        }\n    }\n\n    document.getElementById('image-crop')\n    .addEventListener('click', () => {\n        ccEverywhere.openQuickAction({\n            id: 'image-crop', \n            inputParams: {\n                asset: {\n                    data: imageUrl, \n                    dataType: 'base64', \n                    type: 'image'\n                }, \n                exportOptions: exportOptions\n            },\n            callbacks: callbacks,\n            modalParams: {},\n        })\n    })\n    <\/script>\n  </body> \n</html>\n")))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-quick-actions-image-index-md-234c929899e17e47aece.js.map